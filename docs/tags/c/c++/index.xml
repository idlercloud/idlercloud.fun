<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>C/C&#43;&#43; - 标签 - 闲云的博客</title>
    <link>http://idlercloud.xyz/tags/c/c&#43;&#43;/</link>
    <description>C/C&#43;&#43; - 标签 - 闲云的博客</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><atom:link href="http://idlercloud.xyz/tags/c/c&#43;&#43;/" rel="self" type="application/rss+xml" /><item>
  <title>最长公共子序列 (LCS) 在 diff 命令中的应用——Myers 算法</title>
  <link>http://idlercloud.xyz/posts/tech/lcs_for_diff_myers/</link>
  <pubDate>Thu, 11 Aug 2022 18:52:26 &#43;0800</pubDate>
  <author>idlercloud</author>
  <guid>http://idlercloud.xyz/posts/tech/lcs_for_diff_myers/</guid>
  <description><![CDATA[<p>今天 (2022/2/26) 做 CS 110L 的 week2 作业，内容是用 Rust 编写一个简单的 <code>diff</code> 命令。</p>
<p>我才知道原来 Linux 和 Git 的 <code>diff</code> 命令，它的底层算法之一叫做 Myers 算法，而其根本原理是最长公共子序列。</p>
<p>本文讲述 <strong>LCS 的使用和 Myers 算法</strong>。前置知识是动态规划求解 LCS。</p>
<!--more-->
<h2 id="diff-命令做了什么">diff 命令做了什么</h2>
<p>如果你常用 GitHub，应该经常可以看到如下界面。</p>
<p></p>
<p>这表示 <code>diff</code> 命令显示出的本次提交和仓库里之前版本的区别。如你所见，红色、以 <code>-</code> 开头的行代表删除，绿色、以 <code>+</code> 开头的行代表新内容。</p>
<p>你可能会说，上图这样明显是对同一行进行修改，而并没有删除或者添加行啊。确实，但是仔细想想，修改的操作其实可以等价地转换为删除原来的行，然后添上修改之后的行。</p>
<p>这样的等价转换对于底层算法的实现是比较有利的。</p>
<p>我们把代码不同版本的对比问题抽象一下。首先是代码，代码是一个行构成的序列，也就是说，它的先后关系是重要的；那么，两个版本的代码之间的比较，就相当于两个序列之间的比较。</p>
<p>除去删除或者添加的行，你可以看到还有很多不变的行。它们就是两个序列所共有的成分。而你可以想一下，删除的行，实际上是旧版本代码的特有内容；新添的行，实际上是新版本代码的特有内容。</p>
<p>那么每个代码都是由特有和共有的内容混合组成的，如下。</p>
<p>code1: 共有 1 旧特有 1 共有 2 旧特有 2 旧特有 3 共有 3</p>
<p>code2: 共有 1 共有 2 新特有 1 共有 3 新特有 2</p>
<p>我们要做的，其实就是判断两个代码之间哪些是共有、哪些是旧版本特有，哪些是新版本特有的。</p>
<p>到这你就可以想到了，共有的成分，那不就是公共子序列吗。</p>
<h2 id="最长公共子序列lcs">最长公共子序列(LCS)</h2>
<p>这一部分我假定你是有相关基础的，如果没有的话建议去搜几篇文章看看。</p>
<p>我们来回忆一下，LCS 描述这样一种问题：在两个序列中，找到它们共有的最长的子序列。序列一是 <code>1 2 3 4</code>，序列二是 <code>1 3 4 5</code>，那么 LCS 就是 <code>1 3 4</code>。</p>
<p>LCS 的求法，比较常规的是动态规划 $O(n^2)$ 求解。</p>
<p>假定两个序列是 <code>s1</code> 和 <code>s2</code>，长度分别为 <code>n</code> 和 <code>m</code>，我们定义二维数组 <code>dp[n+1][m+1]</code>（+1 是为了方便）。<code>dp[i][j]</code> 表示“<code>s1</code> 前 <code>i</code> 项和 <code>s2</code> 前 <code>j</code> 项的 LCS 的长度”。那么就有如下状态转移函数。</p>
<p>$$
\begin{aligned}
dp[i][j]=
\begin{cases}
&amp;0,&amp;若 i=0 或 j=0\\
&amp;dp[i-1][j-1]+1,&amp;若s[i-1]=s[j-1]\\
&amp;max(dp[i-1][j],dp[i][j-1]),&amp;若s[i-1]\ne s[j-1]
\end{cases}
\end{aligned}
$$</p>
<h2 id="myers-算法">Myers 算法</h2>
<p>如果让你用 LCS 来做 <code>diff</code>，你会如何完成？我的第一想法是，从<code>dp[n][m]</code>开始，可以依次往上追溯，找到所有的公共项。那么两个序列中剩下的部分就是各自特有的了。</p>
<p>Myers 算法也是这个思路，不过它稍微高明一些，在回溯的过程中就同时判定公共项和特有项。</p>
<p>我们先来看一张图。</p>
<p></p>
<blockquote>
<p>图片来自<a
  href="https://www.cnblogs.com/zqybegin/p/13734107.html"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>这个博客</a></p>
</blockquote>
<p>上图是序列 <code>ABCBDAB</code> 和 <code>BDCABA</code> 的 dp 结果。箭头表示转移路径。</p>
<p>如你所见，从最右下角出发，沿着路径一直向左上方找到起点（灰色底色）。</p>
<p>Myers 算法的思路就是：如果它是向左上转移，说明这是公共部分；如果向上转移，那么它就是第一个序列的特有部分；如果向左转移，那么就是第二个序列的特有部分。</p>
<p>C++ 代码如下（Rust 直接改的，我没测试）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">print_diff</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="o">&amp;</span><span class="n">dp</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">s1</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">s2</span><span class="p">,</span> <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="kt">int</span> <span class="n">j</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">s1</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">s2</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">print_diff</span><span class="p">(</span><span class="n">dp</span><span class="p">,</span> <span class="n">s1</span><span class="p">,</span> <span class="n">s2</span><span class="p">,</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;  &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">s1</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">j</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">]))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">print_diff</span><span class="p">(</span><span class="n">dp</span><span class="p">,</span> <span class="n">s1</span><span class="p">,</span> <span class="n">s2</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;+ &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">s2</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">j</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">]))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">print_diff</span><span class="p">(</span><span class="n">dp</span><span class="p">,</span> <span class="n">s1</span><span class="p">,</span> <span class="n">s2</span><span class="p">,</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">j</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;- &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">s1</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>你可以看到，它是一个递归的做法，以此来让输出顺序颠倒。</p>
<p>你也可以不用递归，每次把输出结果存在一个 <code>stack</code> 中，以此用循环完成。</p>
<h2 id="总结">总结</h2>
<p>有了以上知识点，想实现 <code>diff</code> 就很容易了。我们可以用 <code>getline</code> 之类的读入代码，用一个 <code>vector&lt;string&gt;</code> 存储，每一项存储一行代码。然后再用一个 LCS 函数求出 <code>dp</code> 数组。最后传 到<code>print_diff</code> 函数，就可以得到结果了。</p>
<p>不过，LCS 的 DP 求解算法复杂度是 $O(n^2)$，而且据说被证明不可改进。所以据说实践中常常用一些线性复杂度的近似算法。</p>
<blockquote>
<p>版权声明：本文采用<a rel="license" href="http://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a>进行许可，转载请注明出处。</p>
<p>本文链接：<a
  href="http://idlercloud.xyz/posts/tech/lcs_for_diff_myers/"
  
  
  
  
  
>http://idlercloud.xyz/posts/tech/lcs_for_diff_myers/</a></p>
</blockquote>]]></description>
</item></channel>
</rss>
