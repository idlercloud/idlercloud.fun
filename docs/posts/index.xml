<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>所有文章 - 闲云的博客</title>
    <link>http://idlercloud.xyz/posts/</link>
    <description>所有文章 | 闲云的博客</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 27 Oct 2024 15:09:26 &#43;0800</lastBuildDate><atom:link href="http://idlercloud.xyz/posts/" rel="self" type="application/rss+xml" /><item>
  <title>文章与博客推荐</title>
  <link>http://idlercloud.xyz/posts/tech/recommend_articles/</link>
  <pubDate>Sun, 27 Oct 2024 15:09:26 &#43;0800</pubDate>
  <author>idlercloud</author>
  <guid>http://idlercloud.xyz/posts/tech/recommend_articles/</guid>
  <description><![CDATA[<p>平时上班<del>摸鱼</del>和业余会看一些博客和技术文章，其中有一些我觉得不错的，记录在这里。</p>
<h2 id="业界新闻趣闻">业界新闻/趣闻</h2>
<ul>
<li><a
  href="https://www.circle-lang.org/draft-profiles.html"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>Why Safety Profiles Failed</a>
<ul>
<li>2024 年 10 月</li>
<li>safe cpp 提案作者、Circle C++ 编译器作者写的文章</li>
<li>他前段时间提出了 <a
  href="https://safecpp.org/draft.html"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>safe cpp 提案</a>，在社区中引起了巨大争议</li>
<li>这篇文章则是狠狠批评了 C++ 之父 BS 和现在的 C++ 委员会主席 Herb Sutter 主张的另一种叫作 safety profile 的方案</li>
</ul>
</li>
<li><a
  href="https://learn.microsoft.com/en-us/windows/whats-new/whats-new-windows-11-version-24h2#rust-in-the-windows-kernel"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>What&rsquo;s new in Windows 11, version 24H2</a>
<ul>
<li>2024 年 10 月</li>
<li>Windows 内核中的 Rust 首次进入正式发布</li>
<li>先前 Windows 自家也有宣传，也有人在内核组件中发现了 Rust 符号</li>
<li>不过这还是第一次正式进入大众视野，略有些纪念意义吧</li>
</ul>
</li>
<li><a
  href="https://telegra.ph/%E7%BB%B4%E6%8A%A4%E8%80%85-Serge-Semin-%E7%9A%84%E5%91%8A%E5%88%AB%E4%BF%A1-10-24-3"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>维护者 Serge Semin 的告别信</a>
<ul>
<li>2024 年 10 月</li>
<li>Linux 移除俄罗斯维护者名单事件的其中一位被移除者写的告别信</li>
<li>真情流露，颇有一种托孤之悲壮，令人难以平静</li>
</ul>
</li>
<li><a
  href="https://security.googleblog.com/2024/09/eliminating-memory-safety-vulnerabilities-Android.html"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>Eliminating Memory Safety Vulnerabilities at the Source</a>
<ul>
<li>2024 年 9 月</li>
<li>安卓将关键组件（蓝牙、WiFi 等）从 C/C++ 迁移到内存安全语言（如 Rust）</li>
<li>观察到的内存安全漏洞显著减少</li>
</ul>
</li>
<li><a
  href="https://eieio.games/essays/the-secret-in-one-million-checkboxes/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>The secret inside One Million Checkboxes</a>
<ul>
<li>2024 年 8 月</li>
<li>有趣的互联网小故事</li>
<li>作者在 2024 年 6 月发布了一个名为「百万复选框」的网站，它上面有一百万个全局复选框，选中（或取消选中）一个框会立即为网站上的每个人更改它</li>
<li>在网站在线期间，它的受欢迎程度远超作者想象：两周内有五十万名玩家勾选了超过六亿五千万次复选框。</li>
<li>在这期间发生了一些充斥着技术浪漫的故事</li>
</ul>
</li>
<li><a
  href="https://build-your-own.org/blog/20240813_css_vertical_center/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>CSS finally adds vertical centering in 2024</a>
<ul>
<li>2024 年 8 月</li>
<li>2024 年，css 终于添加了一个（直白的）垂直居中的方式</li>
</ul>
</li>
<li><a
  href="https://tonsky.me/blog/js-bloat/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>JavaScript Bloat in 2024</a>
<ul>
<li>2024 年 2 月</li>
<li>作者用特定的方法查看了一些著名网站的 JavaScript 大小（我不太清楚 ta 的方法是否准确）</li>
<li>然后发现这些号称使用现代前端技术的网站动辄十几乃至几十 MB</li>
<li>有趣的是，真正关心性能的是 Pornhub，只有 1.4 MB</li>
<li>Reddit 上有人说这些大小其实主要来自于广告跟踪器、第三方营销工具、Datadog、Rollbar 等。用广告拦截器之类的东西可以显著降低</li>
</ul>
</li>
<li><a
  href="https://tonsky.me/blog/checkbox/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>In Loving Memory of Square Checkbox</a>
<ul>
<li>2024 年 1 月</li>
<li>有点意思的文章，讲单选框 (radio box) 和复选框 (check box) 的历史</li>
<li>操作系统 UI 有一个长达 40 年的不成文的传统：单选框一定是圆形的，复选框一定是方形的，这样人们可以轻易辨别出到底是单选还是多选</li>
<li>但是今年 (2024)，苹果终于放弃了这个传统，它的新 visionOS 将有圆形复选框</li>
</ul>
</li>
<li><a
  href="https://lethain.com/digg-v4/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>Digg&rsquo;s v4 launch: an optimism born of necessity.</a>
<ul>
<li>2018 年？</li>
<li>一个用 python 的创业公司，因为函数参数给了默认值，而倒闭（可能略有夸张）</li>
<li>参数写错然后导致程序一直 OOM，在业务最高峰的时候停摆，等修好之后已经寄了</li>
<li>python 函数的默认参数是定义时求值而非调用时求值，所以多次调用时，默认参数的实例是同一个，还挺反直觉的</li>
</ul>
</li>
</ul>
<h2 id="精品文章">精品文章</h2>
<ul>
<li><a
  href="https://www.sminez.dev/socrates-is-a-state-machine/#sans-i-o-oh-c-est-le-but"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>Socrates is a state machine</a>
<ul>
<li>很有趣，滥用 Rust async/await 生成状态机，从而在 stable rust 模拟 generator</li>
</ul>
</li>
<li><a
  href="https://huonw.github.io/blog/2025/03/rust-fallthrough/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>Take a break: Rust match has fallthrough</a>
<ul>
<li>用 label break 模拟 switch 的 fallthrough，很有趣</li>
</ul>
</li>
<li><a
  href="https://github.com/johnousterhout/aposd-vs-clean-code/blob/main/README.md"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>aposd-vs-clean-code</a>
<ul>
<li>《软件设计的哲学》和《代码整洁之道》作者的辩论</li>
<li>感觉 uncle bob 有点太偏激了</li>
</ul>
</li>
<li><a
  href="https://herecomesthemoon.net/2024/11/two-factions-of-cpp/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>The two factions of C++</a>
<ul>
<li>C++ 作者 BS 喜欢强调「C++ 没有方言」</li>
<li>但在本文作者看来，C++ 没有方言的梦可能已经破灭了许多年</li>
<li>作者认为 C++ 领域中最明显的分野是：
<ul>
<li>相对现代、能力充足、将其代码作为资产的技术公司</li>
<li>其他人，更古老、更固执、更跟不上时代的用户</li>
</ul>
</li>
<li>BS 和 HS 很喜欢强调 C++ 数十年来的遗产，使得语言演化必须要最小化对已有部分的修改</li>
<li>但谷歌等公司（使用相对现代的 C++、拥有自动化工具和测试以及现代基础设施）的需求与（非常强烈的）向后兼容性愿望之间存在明显的脱节</li>
<li>所以，作者认为，至少在工具上，C++ 被分为了两个明显的阵营</li>
<li>原文挺精彩，这里的概括很不完全，建议阅读</li>
</ul>
</li>
<li><a
  href="https://herecomesthemoon.net/2025/01/type-inference-in-rust-and-cpp/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>Type Inference in Rust and C++</a>
<ul>
<li>对比 Rust 和 C++ 的类型推导，包括为什么二者发展为这样</li>
<li>当然免不了调侃一下 Swift 臭名昭著的极慢类型推导</li>
</ul>
</li>
<li><a
  href="https://www.lpalmieri.com/posts/2020-09-27-zero-to-production-4-are-we-observable-yet/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>Are we observable yet? An introduction to Rust telemetry</a>
<ul>
<li>虽然是比较久之前的文章（2020 年 9 月），但是也尚不算过时</li>
<li>介绍了可观察性的概念，从为什么到是什么到如何做</li>
<li>介绍了 Rust 中的相关 crate，带有丰富的示例</li>
<li>写得很好。作者的书《Zero To Production In Rust》也很不错</li>
</ul>
</li>
<li><a
  href="https://nipafx.dev/java-visitor-pattern-pointless/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>Visitor Pattern Considered Pointless - Use Pattern Switches Instead</a>
<ul>
<li>用现代 java 的 sealed interface 和模式匹配代替 visitor 模式</li>
<li>更简洁、更自然、更灵活、甚至可能性能更好</li>
<li>所以有人说设计模式是为了弥补语言缺陷</li>
</ul>
</li>
<li><a
  href="https://caseymuratori.com/blog_0015"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>Semantic Compression</a>
<ul>
<li>作者表达了对面向对象思维的怀疑，提倡所谓语义压缩</li>
<li>大致可以认为是：不要先以对象思维、抽象思维编码，而是面向过程地编写后，再提炼精髓</li>
</ul>
</li>
<li><a
  href="https://fractalfir.github.io/generated_html/refl_priv.html"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>Rust, reflection and access rules</a>
<ul>
<li>思考如果 Rust 有反射（无论是静态的还是动态的），它如何与访问规则交互</li>
<li>由于 Rust 是一个系统编程语言，它有一些额外的权衡</li>
<li>尤其是需要考虑到内存安全问题</li>
</ul>
</li>
<li><a
  href="https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>Parse, don’t validate</a>
<ul>
<li>提倡类型驱动设计的文章，非常值得一看</li>
<li>尽管代码示例是用 haskell 写的，核心思想还是通用的</li>
</ul>
</li>
<li><a
  href="https://hynek.me/articles/semver-will-not-save-you/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>Semantic Versioning Will Not Save You</a>
<ul>
<li>作者认为：依赖于 SemVer 会伤害用户</li>
<li>有一定道理。读一读可以更多思考项目、依赖、开源库之间的复杂关系</li>
</ul>
</li>
<li><a
  href="https://blogsystem5.substack.com/p/windows-nt-vs-unix-design"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>Windows NT vs. Unix: A design comparison</a>
<ul>
<li>如题，比较 Windows NT 和 Unix 系的设计不同</li>
<li>看了这篇文章真有点感觉 Windows NT 比 unix 系好多了（毕竟它是后来者，有足够的经验可以吸收）</li>
</ul>
</li>
<li><a
  href="https://matklad.github.io/2022/04/25/why-lsp.html"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>Why LSP</a>，<a
  href="https://matklad.github.io/2023/10/12/lsp-could-have-been-better.html"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>LSP could have been better</a>
<ul>
<li>对 lsp 的一些思考。作者 matklad 是 rust-analyzer（rust 的语言服务器）的主要开发者，可能是世界上对 LSP 理解最深刻的人之一了</li>
<li>提到 lsp 是如何做抽象的（很有意思，不是以共性为中心，而是以表现为中心），为什么可以成功</li>
</ul>
</li>
<li><a
  href="https://jvns.ca/blog/good-questions/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>How to ask good questions</a>
<ul>
<li>开发者社区中很多人可能都听说过<a
  href="http://www.catb.org/~esr/faqs/smart-questions.html"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>提问的智慧</a></li>
<li>作者认为它是「很受欢迎且充满敌意的文档」，比如它开头就写「我们称这样的人为“失败者”」</li>
<li>他提出了一些略微温和的准则。至于到底如何更好，见仁见智吧</li>
</ul>
</li>
<li><a
  href="https://blog.stephencleary.com/2013/04/recursive-re-entrant-locks.html"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>Recursive (Re-entrant) Locks</a>
<ul>
<li>主要是对可重入锁的批判</li>
</ul>
</li>
<li><a
  href="https://sunshowers.io/posts/beyond-ctrl-c-signals"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>Beyond Ctrl-C: The dark corners of Unix signal handling</a>
<ul>
<li>关于 unix 信号的一篇不错的科普文章，有一段是关于 async rust 的，其他的部分适合所有人</li>
</ul>
</li>
<li><a
  href="https://fabiensanglard.net/dc/index.php"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>Driving Compilers</a>
<ul>
<li>一个不错的系列，讲 c 如何从源文件编译链接最后加载的整个过程，总体比较简洁，熟手拿来查漏补缺也不错</li>
</ul>
</li>
<li><a
  href="https://mp.weixin.qq.com/s/ieEewizkN7H-11z-PexkGw"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>沅有芷兮：类型系统的数学之美</a>
<ul>
<li>其他发布链接：<a
  href="https://zhuanlan.zhihu.com/p/69223872%ef%bc%88%e6%9c%89%e4%b8%80%e4%ba%9b%e6%a0%bc%e5%bc%8f%e9%97%ae%e9%a2%98%ef%bc%89"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>https://zhuanlan.zhihu.com/p/69223872（有一些格式问题）</a>、<a
  href="https://cloud.tencent.com/developer/article/1447498"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>https://cloud.tencent.com/developer/article/1447498</a></li>
<li>科普 primitive type、sum type、product type、generics 在数学上的含义，言简意赅</li>
</ul>
</li>
<li><a
  href="https://werat.dev/blog/what-a-good-debugger-can-do/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>What a good debugger can do</a>
<ul>
<li>主要讨论了一个优秀的调试器应该具备的功能和特性，不只是断点调试，大开眼界。</li>
<li>剧透：列断点、tracing 断点、数据断点、多线程调试、热重载、时间旅行、全知 (Omniscient) 调试</li>
</ul>
</li>
<li><a
  href="https://matklad.github.io/2021/05/31/how-to-test.html"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>How to Test</a>
<ul>
<li>matklad（rust-analyzer 的主要开发者）的文章，讲述一些测试的理念，引人深思</li>
</ul>
</li>
<li><a
  href="https://fasterthanli.me/articles/the-curse-of-strong-typing"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>The curse of strong typing</a>
<ul>
<li>实际上是一篇 Rust 的教学文章，由浅入深，主要是关于类型系统的。</li>
</ul>
</li>
<li><a
  href="https://www.microsoft.com/en-us/research/publication/a-fork-in-the-road"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>A <code>fork()</code> in the road</a>
<ul>
<li>微软发表的论文，反对 UNIX <code>fork()</code>，列举了诸多 <code>fork()</code> 的坏处，并提出了一些替代方案</li>
</ul>
</li>
<li><a
  href="https://github.com/pretzelhammer/rust-blog/blob/master/posts/tour-of-rusts-standard-library-traits.md"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>Tour of Rust&rsquo;s Standard Library Traits</a>
<ul>
<li>介绍 Rust 标准库的 trait，挺全面的</li>
</ul>
</li>
<li><a
  href="https://github.com/pretzelhammer/rust-blog/blob/master/posts/sizedness-in-rust.md"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>Sizedness in Rust</a>
<ul>
<li>和类型「大小」相关的概念。比如 <code>Sized</code> trait，dynamically sized types(DST)，zero sized types(ZST)</li>
<li>对于系统编程语言（主要指 C/C++/Rust 等，一般无 GC）而言，类型的大小是一个非常基本的限制，会影响到语言设计的方方面面，也是这类语言复杂性的一个常见来源</li>
<li>因此这篇文章虽然主要是关于 Rust 的，但是对 C/C++ 的理解也可以有一定启发作用</li>
</ul>
</li>
</ul>
<h2 id="书籍教程">书籍教程</h2>
<ul>
<li><a
  href="https://toetoe55.github.io/async-rt-book/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>Rust 异步运行时基础部件</a>
<ul>
<li>设计和实现简单的异步运行时</li>
<li>其实还是有点简陋的，但是查漏补缺也不错</li>
</ul>
</li>
<li><a
  href="https://www.craftinginterpreters.com/contents.html"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>Crafting Interpreters</a>
<ul>
<li>实践编译原理知识的绝佳好书，同时也是练习工程开发的很好材料</li>
<li>真正地在教学工业界使用的技术，也会适当扩展各种语言实现的趣闻、语言设计的思考等</li>
<li>虽然实现语言是 java 和 c，但原理相通</li>
</ul>
</li>
</ul>
<h2 id="博客时事通讯播客推荐">博客/时事通讯/播客推荐</h2>
<ul>
<li><a
  href="https://without.boats"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>Without boats, dreams dry up</a>
<ul>
<li>无舟子（戏称）的博客</li>
<li>他是 Rust 异步系统的主要设计人之一，博客文章的见解相当深刻</li>
</ul>
</li>
<li><a
  href="https://blog.yoshuawuyts.com"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>https://blog.yoshuawuyts.com</a>
<ul>
<li>也是 Rust 团队成员之一，博客里会探索一些语言设计，也会有一些和 WebAssembly 相关的</li>
</ul>
</li>
<li><a
  href="https://fasterthanli.me"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>https://fasterthanli.me</a>：Amos 的博客
<ul>
<li>他有许多由浅入深的 Rust 教学文章，深受社区好评</li>
</ul>
</li>
<li><a
  href="https://smallcultfollowing.com/babysteps"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>Baby Steps</a>
<ul>
<li>Niko Matsakis 的博客。Rust 团队成员之一，博客有很多语言设计相关的思考（以及画饼）</li>
</ul>
</li>
<li><a
  href="https://faultlore.com/blah"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>Faultlore</a>：Gankra 的博客。
<ul>
<li>她也是 Rust 团队成员，博客里写了很多 unsafe 相关的底层知识</li>
<li>写了 <a
  href="https://rust-unofficial.github.io/too-many-lists/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>too many lists</a>、<a
  href="https://doc.rust-lang.org/nightly/nomicon/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>The Rustonomicon</a> 等教程。文风中二而有趣</li>
</ul>
</li>
<li><a
  href="https://www.ralfj.de/blog"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>Ralf&rsquo;s Ramblings</a>
<ul>
<li>RalfJung 的博客。Rust 团队成员</li>
<li>主要工作应该也是关于 unsafe 的，比如 <a
  href="https://github.com/rust-lang/miri"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>miri</a> 和 <a
  href="https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>stacked borrows</a></li>
</ul>
</li>
<li><a
  href="https://matklad.github.io"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>https://matklad.github.io</a>
<ul>
<li>matklad 的博客。他是 rust-analyzer 的主要开发者</li>
<li>博客主要关于 IDE/编译器、软件开发最佳实践（如测试）、理论知识等</li>
</ul>
</li>
<li><a
  href="https://www.redox-os.org/zh/news"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>https://www.redox-os.org/zh/news</a>
<ul>
<li>redox OS 的新闻，包括每月通讯</li>
</ul>
</li>
<li><a
  href="https://rust-osdev.com/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>This Month in Rust OSDev</a>
<ul>
<li>Rust OS 开发生态的每月通信</li>
</ul>
</li>
<li><a
  href="https://this-week-in-rust.org/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>This Week in Rust</a>
<ul>
<li>Rust 生态系统的每周通讯</li>
</ul>
</li>
<li><a
  href="https://thisweekinbevy.com/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>This Week in Bevy</a>
<ul>
<li>bevy engine 的每周通讯</li>
<li>主要信息来源包括 github、Discord 等</li>
</ul>
</li>
<li><a
  href="https://sdr-podcast.com/episodes/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>Self-Directed Research Podcast</a>
<ul>
<li>Amos 和 James 的播客，各种开发技术都可能讨论</li>
</ul>
</li>
</ul>
<blockquote>
<p>版权声明：本文采用 <a
  href="http://creativecommons.org/licenses/by/4.0/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>CC BY 4.0</a> 进行许可，转载请注明出处。</p>
<p>本文链接：<a
  href="http://idlercloud.xyz/posts/tech/recommend_articles/"
  
  
  
  
  
>http://idlercloud.xyz/posts/tech/recommend_articles/</a></p>
</blockquote>]]></description>
</item><item>
  <title>在 Rust 中表征树形结构</title>
  <link>http://idlercloud.xyz/posts/tech/tree_in_rust/</link>
  <pubDate>Sun, 14 Aug 2022 23:42:42 &#43;0800</pubDate>
  <author>idlercloud</author>
  <guid>http://idlercloud.xyz/posts/tech/tree_in_rust/</guid>
  <description><![CDATA[<p>树形结构在软件中相当常用。比如文件目录、右键菜单、多级收藏夹等。</p>
<p>在其它语言，如 C/C++ 中，表达树形结构可能仅需要指针即可，然而在 Rust 中需要稍费周折。</p>
<p><figure><a class="lightgallery" href="/images/tree_eg_content.png" title="树示例" data-thumbnail="/images/tree_eg_content.png" data-sub-html="<h2>Hugo 文章结构</h2><p>树示例</p>">
    
  </a><figcaption class="image-caption">Hugo 文章结构</figcaption>
  </figure></p>
<p>众所周知，Rust 中想要实现一个足够通用的双向链表并不是容易事，其根本原因是所有权机制。</p>
<p>在链表这样底层的数据结构中，所有权关系往往并没有那么明确。对于树来说也是同样。</p>
<p>下面我来尝试梳理一些解决方案。</p>
<h2 id="应用场景">应用场景</h2>
<p>首先来假定一个简单的应用场景吧。</p>
<p><figure><a class="lightgallery" href="/images/adobe_acrobat_csapp_catalog.png" title="Acrobat 书签" data-thumbnail="/images/adobe_acrobat_csapp_catalog.png" data-sub-html="<h2>Acrobat 书签，CSAPP 目录</h2><p>Acrobat 书签</p>">
    
  </a><figcaption class="image-caption">Acrobat 书签，CSAPP 目录</figcaption>
  </figure></p>
<p>假设我们希望实现 Acrobat 这样的多级书签功能，并且需要可以修改：包括增删改书签、调整顺序、调整级别。</p>
<p>这是一个广义的非二叉树结构。或者更准确点是个森林结构，因为顶级标签并无父节点，不过这无伤大雅。</p>
<p>总之抽象出来的需求就是：</p>
<ol>
<li>除根节点外，每个节点具有一个父节点</li>
<li>每个节点可以具有多个子节点，也可以没有</li>
<li>节点具有数据值（在这里是标签名）</li>
</ol>
<h2 id="1-递归数据结构">1. 递归数据结构</h2>
<h3 id="定义">定义</h3>
<p>我们用 <code>Item</code> 代表每一个标签项。</p>
<p>一个优美而非常具有诱惑力的想法是朴素的递归数据结构：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">Item</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">name</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">children</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="n">Item</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>顺便一提，如果希望树是异构的，比如需要在类型系统上区分内节点和叶节点，可以使用 <code>enum</code></p>
</blockquote>
<p>非常简单。而如果希望遍历整个树，代码也非常简洁：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">impl</span><span class="w"> </span><span class="n">Item</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">fn</span> <span class="nf">walk</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="n">child</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="o">&amp;</span><span class="bp">self</span><span class="p">.</span><span class="n">children</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">child</span><span class="p">.</span><span class="n">walk</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这已经是几乎不能再短的代码量了。</p>
<h3 id="缺点">缺点</h3>
<p>然而这种简洁背后其实隐含的信息是：每个 <code>Item</code> 完整拥有其子节点的所有权。</p>
<p>或者说，任何一个子节点，都被看作是父节点的一部分。这意味一旦发生借用，将会影响到整个父节点。</p>
<p>比如说我需要根据节点的名称找到该节点，函数的签名可能类似于：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">fn</span> <span class="nf">look_for</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">name</span>: <span class="kp">&amp;</span><span class="kt">str</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Option</span><span class="o">&lt;&amp;</span><span class="n">Item</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="fm">todo!</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这里返回的 <code>Item</code> 的引用可能需要暂存起来，之后再使用来做某些事。然而既然是引用，就需要服从 Rust 的所有权机制。</p>
<p>也就是说，这时候从根开始的整个树是不可变的。这显然极大地妨碍了可进行的操作。</p>
<p>更何况，有时候我们需要返回特定节点的可变引用，以待进行操作，如进行重命名等。</p>
<p>以书签为例，我们可能需要在发生鼠标事件时选中某个标签。也就是返回其引用。而直到很长一段时间之后，我可能忽然需要将它重命名，那么先前返回的就得是可变引用。</p>
<p>而在这段时间之内，就连不可变借用都无法发生。</p>

<p>更糟糕的是，假如我需要调整某个标签的位置呢？如果是在同一层调整先后顺序，那就必须要获取父节点的可变引用，调整其 <code>children</code> 字段。</p>
<p>这几乎是不可完成的。所以需要换个思路。</p>
<h3 id="变通方法">变通方法</h3>
<p>在换思路之前我们先来看看有没有一些（不优雅的）修补方法。</p>
<p>上述方法之所以不可用，是因为试图用引用来访问某个特定的节点。</p>
<p>既然如此，干脆不引用得了。最极端的方法：每次需要进行操作我都从根节点朝下遍历找到需要的节点。</p>
<p>在节点较少时，这种方案还算可以接受，毕竟代码比较容易写。</p>
<p>另一种稍微优化的方案是，对于每个节点，使用从根到其路径来代表它。</p>
<p>具体而言就是，用一个 <code>Vec&lt;usize&gt;</code> 记录路径，表示“根节点的第 x 个子节点的第 y 个子节点的&hellip;”。</p>
<p>如下述结构，其中 <code>life</code> 节点可以用 <code>[1,0]</code> 表示，代表它是根节点 <code>content</code> 的第 1 个子节点 <code>categories</code> 的第 0 个子节点。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">content
</span></span><span class="line"><span class="cl">├── about.md
</span></span><span class="line"><span class="cl">└── categories
</span></span><span class="line"><span class="cl">   ├── life
</span></span><span class="line"><span class="cl">   └── tech
</span></span></code></pre></td></tr></table>
</div>
</div><p>在大部分情况下，树形结构的深度都不会太夸张，那么这个方案也是可以接受的。</p>
<p>不过需要注意的是，路径随时可能失效。比如我有一天忽然删除了 <code>about.md</code> 这个节点，那么 <code>categories</code> 就变成了 <code>content</code> 的第 0 个子节点了。</p>
<h2 id="2-内部可变性与共享所有权">2. 内部可变性与共享所有权</h2>
<h3 id="定义-1">定义</h3>
<p>朴素方法的核心矛盾在于，无法长久保存一个节点的可变引用。</p>
<p>此时我们就得想办法绕过 Rust 的借用检查机制了。</p>
<p>比如使用 <a
  href="https://doc.rust-lang.org/std/rc/struct.Rc.html"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
><code>Rc</code></a> 共享所有权，以及使用 <a
  href="https://doc.rust-lang.org/std/cell/struct.RefCell.html"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
><code>RefCell</code></a> 获得内部可变性。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">Item</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">name</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">children</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="n">Rc</span><span class="o">&lt;</span><span class="n">RefCell</span><span class="o">&lt;</span><span class="n">Item</span><span class="o">&gt;&gt;&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>用 <code>Rc</code> 是必不可少的，因为 <code>RefCell</code> 并非完全避开借用检查，只是将编译时运行检查推迟到运行时而已。这也意味着仍然无法同时持有可变引用和不可变引用。</p>
<p>举个例子：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="kd">let</span><span class="w"> </span><span class="n">root</span>: <span class="nc">RefCell</span><span class="o">&lt;</span><span class="n">Item</span><span class="o">&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">get_example</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="n">item_ref</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">root</span><span class="p">.</span><span class="n">borrow</span><span class="p">().</span><span class="n">children</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">root</span><span class="p">.</span><span class="n">borrow_mut</span><span class="p">().</span><span class="n">children</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>第 2 行借用了 1 号子节点，然而第 3 行却又操作了子节点数组，这个过程无可避免地用到了可变借用，于是发生了运行时错误：<code>thread 'refcell::lab::test' panicked at 'already borrowed: BorrowMutError'</code>。</p>
<p>为了保证节点的生命周期，我们需要用 <code>Rc</code> 来共享所有权。</p>
<p>除去对子节点的引用外，我们还需要保留对父节点的引用，以方便某些操作（如调整某节点在父节点列表中的顺序）。</p>
<p>然而，这里却不可以再采取 <code>Rc</code> 的方法了，原因是形成了循环引用。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="cp">#[derive(Debug)]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">struct</span> <span class="nc">Item</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">name</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">parent</span>: <span class="nb">Option</span><span class="o">&lt;</span><span class="n">Rc</span><span class="o">&lt;</span><span class="n">RefCell</span><span class="o">&lt;</span><span class="n">Item</span><span class="o">&gt;&gt;&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">children</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="n">Rc</span><span class="o">&lt;</span><span class="n">RefCell</span><span class="o">&lt;</span><span class="n">Item</span><span class="o">&gt;&gt;&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>由于根节点可以没有父节点，所以采用 <code>Option</code> 包装了 <code>parent</code> 字段。</p>
<p>以上结构在 Rust 中是合法的。然而它其实因为循环引用而发生了内存泄露，如需证明，可以运行以下代码。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="kd">let</span><span class="w"> </span><span class="n">l1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Rc</span>::<span class="n">new</span><span class="p">(</span><span class="n">RefCell</span>::<span class="n">new</span><span class="p">(</span><span class="n">Item</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">name</span>: <span class="s">&#34;l1&#34;</span><span class="p">.</span><span class="n">to_string</span><span class="p">(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">parent</span>: <span class="nb">None</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">children</span>: <span class="nc">vec</span><span class="o">!</span><span class="p">[],</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="n">l2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Rc</span>::<span class="n">new</span><span class="p">(</span><span class="n">RefCell</span>::<span class="n">new</span><span class="p">(</span><span class="n">Item</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">name</span>: <span class="s">&#34;l2&#34;</span><span class="p">.</span><span class="n">to_string</span><span class="p">(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">parent</span>: <span class="nb">Some</span><span class="p">(</span><span class="n">l1</span><span class="p">.</span><span class="n">clone</span><span class="p">()),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">children</span>: <span class="nc">vec</span><span class="o">!</span><span class="p">[],</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">l1</span><span class="p">.</span><span class="n">borrow_mut</span><span class="p">().</span><span class="n">children</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">l2</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;{:?}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">l1</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这会输出无穷无尽的内容，直到编译器报错 <code>thread 'refcell::lab::test' has overflowed its stack</code> 并退出。</p>
<p>稍微分析以下就知道，子节点 <code>l2</code> 引用了父节点 <code>l1</code>，而 <code>l1</code> 又引用了 <code>l2</code>，这样的循环引用导致循环计数永不归零，发生内存泄漏。</p>
<p>为了避免这个问题，需要使用弱引用 <a
  href="https://doc.rust-lang.org/std/rc/struct.Weak.html"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
><code>Weak</code></a>。</p>
<blockquote>
<p>其实不是用弱引用也是可以的，只需要手动实现 <code>Drop</code> trait，在析构时手动解除引用即可——<code>Rc</code> 循环引用的问题在于它不是自动析构的</p>
<p>另外提一点，递归结构的默认析构可能会导致递归析构，因而栈溢出。为了避免这种情况也可以手动实现 <code>Drop</code></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="c1">// 为了方便起个短的别名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">type</span> <span class="nc">Parent</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Weak</span><span class="o">&lt;</span><span class="n">RefCell</span><span class="o">&lt;</span><span class="n">Item</span><span class="o">&gt;&gt;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">type</span> <span class="nc">ItemRef</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Rc</span><span class="o">&lt;</span><span class="n">RefCell</span><span class="o">&lt;</span><span class="n">Item</span><span class="o">&gt;&gt;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">struct</span> <span class="nc">Item</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">name</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">parent</span>: <span class="nc">Parent</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">children</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="n">ItemRef</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>值得一提的是，这里 <code>Parent</code> 类型可以不用包装为 <code>Option</code>，因为 <code>Weak</code> 本身也是可以指向空的。</p>
<p>还是以遍历和获取特定节点为例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">fn</span> <span class="nf">walk</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">child</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="o">&amp;</span><span class="bp">self</span><span class="p">.</span><span class="n">children</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">child</span><span class="p">.</span><span class="n">borrow</span><span class="p">().</span><span class="n">walk</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">look_for</span><span class="p">(</span><span class="n">item</span>: <span class="kp">&amp;</span><span class="nc">ItemRef</span><span class="p">,</span><span class="w"> </span><span class="n">name</span>: <span class="kp">&amp;</span><span class="kt">str</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Option</span><span class="o">&lt;</span><span class="n">ItemRef</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="n">item</span><span class="p">.</span><span class="n">borrow</span><span class="p">().</span><span class="n">name</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="n">item</span><span class="p">.</span><span class="n">clone</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="n">child</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="o">&amp;</span><span class="n">item</span><span class="p">.</span><span class="n">borrow</span><span class="p">().</span><span class="n">children</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="n">ret</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Item</span>::<span class="n">look_for</span><span class="p">(</span><span class="n">child</span><span class="p">,</span><span class="w"> </span><span class="n">name</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="n">ret</span><span class="p">.</span><span class="n">is_some</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">return</span><span class="w"> </span><span class="n">ret</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="nb">None</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><code>walk</code> 的实现大差不大，由于智能指针的 <code>Deref</code> trait，只需要加上一个 <code>.borrow()</code> 即可。而 <code>look_for</code> 的 API 稍微改了一下，没有以 <code>&amp;self</code> 为第一参数，而是 <code>&amp;ItemRef</code>。这是为了方便 <code>clone</code> 出 <code>Rc</code> 返回给调用者。</p>
<p>如果希望以 <code>&amp;self</code> 为参数，作为类型的方法的话，可能需要另外的一个 <code>struct</code> 封装，这里不细讲了。</p>
<p>这个方案还有一个好处在于它可以轻松转换为线程安全的版本：只需将 <code>Rc</code> 改为 <code>Arc</code>，<code>RefCell</code> 改为 <code>RwLock</code> 或 <code>Mutex</code> 即可。当然内部实现也需要略微变化，不过概念上基本保持一致。</p>
<p>而 <code>Arc&lt;Mutex&lt;T&gt;&gt;</code> 的类型本来也就是多线程编程中常用的。</p>
<h3 id="缺点-1">缺点</h3>
<p>这个方案已经足够满足我们的需求了。在持有父节点引用的情况下，无论是调整节点的顺序或者层级都是可行的。而 <code>Rc</code> 又允许我们长久地保存节点，对于重命名等场景也足够好用。</p>
<p>硬要说缺点的话一个是类型的包装比较复杂，如果直接向外界提供接口会暴露很多实现细节。而如果希望封装这些细节则少不了一些样板代码。</p>
<p>另一个是无法方便地集成 <code>serde</code> 进行序列化和反序列化。这是因为 <code>Rc</code> 没有实现 <code>Serialize</code> 和 <code>Deserialize</code>。而且由于涉及到引用的问题，父节点和子节点之间具有依赖关系，必须先后创建。</p>
<p>还有一个就是 <code>RefCell</code> 和 <code>Rc</code> 的运行时开销问题。<code>RefCell</code> 会进行运行时的借用检查，而 <code>Rc</code> 需要维护引用计数，二者都具有一定的开销，总体来说是不如朴素方案的。</p>
<p>思考这些，说到底还是所有权和引用的问题。</p>
<p><code>RefCell</code> 说是避开了编译器检查，但实际上还是免不了运行时检查。</p>
<p>而 <code>Rc</code> 的共享所有权也仍然没有改变节点之间的依赖关系：父节点仍然是拥有子节点的，而子节点也弱引用着父节点。只不过在这种方案下，由于 <code>Rc</code> 的存在，可以创造出临时或长期的其它变量拥有某个节点的所有权。</p>
<p>而下一个方案则是用巧妙的方法更改了所有权的结构，并且避开了引用。</p>
<h2 id="3-arena">3. Arena</h2>
<blockquote>
<p>这个方法我最初是在<a
  href="https://developerlife.com/2022/02/24/rust-non-binary-tree/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>这篇文章</a>中看到的。</p>
</blockquote>
<p>Arena 意为竞技场、大舞台等。关于其在计算机科学中的定义可以参考 <a
  href="https://en.wikipedia.org/wiki/Region-based_memory_management"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>wiki</a>。</p>
<p>简单而言，它就是一块较大的内存空间，我们将所需的数据存放在这块空间中，而非需要时再向操作系统申请。</p>
<p>首先，我们先定义 <code>Arena</code> 和 <code>Item</code> 结构体。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">Arena</span><span class="p">(</span><span class="n">HashMap</span><span class="o">&lt;</span><span class="kt">usize</span><span class="p">,</span><span class="w"> </span><span class="n">Item</span><span class="o">&gt;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">struct</span> <span class="nc">Item</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">name</span>: <span class="nb">String</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">parent</span>: <span class="nb">Option</span><span class="o">&lt;</span><span class="kt">usize</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">children</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="kt">usize</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><code>Arean</code> 就是包装一下 <code>HashMap</code>，它将 <code>usize</code> 映射到某个 <code>Item</code> 上面。这里可以将 <code>usize</code> 理解为 ID。也就是说，我们给每个 <code>Item</code> 一个独一无二的编号，类似于数据库中的主键。</p>
<p>这种编号一经确定不再更改，那么在之后的任何时刻，都可以用一个廉价的 <code>usize</code> 来指代一个 <code>Item</code>，直到需要使用时再从 <code>Arena</code> 中查询即可。</p>
<p>常做算法题或者参与过竞赛的同学应该在图论、树等题目中见过类似的表示。这些题目中往往用节点编号直接表示节点。而且由于题目常常不涉及到删除，可以直接用数组存储，不像这里需要考虑复杂的增删改查所以使用了哈希表。</p>
<p>理解这个之后再看 <code>Item</code>，显然，现在 <code>parent</code> 也通过一个 <code>usize</code> 来表示，当然因为可以没有父节点所以包装为 <code>Option</code>。而 <code>children</code> 子节点列表也可以用 <code>Vec&lt;usize&gt;</code> 表示。</p>
<p>在这种写法下，遍历和查找可以如此表示：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="c1">// 这里是作为 `Arena` 的方法
</span></span></span><span class="line"><span class="cl"><span class="c1">// 实际实现不一定采取这样的接口
</span></span></span><span class="line"><span class="cl"><span class="c1">// 比如可以实现为 `Item` 的方法，并以 `Arena` 为参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">fn</span> <span class="nf">walk</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">curr</span>: <span class="kt">usize</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">node</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="bp">self</span><span class="p">.</span><span class="mi">0</span><span class="p">[</span><span class="o">&amp;</span><span class="n">curr</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">node</span><span class="p">.</span><span class="n">name</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">child</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="o">&amp;</span><span class="n">node</span><span class="p">.</span><span class="n">children</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="bp">self</span><span class="p">.</span><span class="n">walk</span><span class="p">(</span><span class="o">*</span><span class="n">child</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">look_for</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">curr</span>: <span class="kt">usize</span><span class="p">,</span><span class="w"> </span><span class="n">name</span>: <span class="kp">&amp;</span><span class="kt">str</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Option</span><span class="o">&lt;</span><span class="kt">usize</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">item</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="bp">self</span><span class="p">.</span><span class="mi">0</span><span class="p">[</span><span class="o">&amp;</span><span class="n">curr</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="n">item</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="n">curr</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="n">child</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="o">&amp;</span><span class="n">item</span><span class="p">.</span><span class="n">children</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="n">ret</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">look_for</span><span class="p">(</span><span class="o">*</span><span class="n">child</span><span class="p">,</span><span class="w"> </span><span class="n">name</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="n">ret</span><span class="p">.</span><span class="n">is_some</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">return</span><span class="w"> </span><span class="n">ret</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="nb">None</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>思考一下 <code>Arena</code> 这种方法的本质。它实际上让所有权结构由原来的树形结构变为了依托于 <code>HashMap</code> 的平铺结构，然后不通过引用或者 <code>RefCell</code> 等进行索引，而是使用廉价的 ID 作为代表，这也是某种意义上的引用。</p>
<p>由于这里的所有类型都是比较平常的，因此它可以轻松集成 <code>serde</code>。而如果需要多线程，则使用并发原语保护 <code>Arena</code> 即可。</p>
<p>不过这里其实有一些微妙之处：<code>children</code> 中的 <code>usize</code> 可以重复吗？一般而言不会想让它重复，所以我们可以用 <code>HashSet</code> 或 <code>BTreeSet</code> 来代替 <code>Vec</code>。</p>
<p>但这样的修改又会带来一些微妙之处：在类似于书签这样的应用场景下，我们希望子节点是有序的。<code>HashSet</code> 显然无序，而 <code>BTreeSet</code> 虽然有序，却是根据键值决定的顺序，不修改键值也就是 ID 就无法调整顺序。因此这里使用了第三方库 <a
  href="https://docs.rs/indexmap/1.9.1/indexmap/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
><code>indexmap</code></a> 中的 <a
  href="https://docs.rs/indexmap/1.9.1/indexmap/set/struct.IndexSet.html"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
><code>IndexSet</code></a> 来同时保证唯一性和有序性。</p>
<h2 id="总结">总结</h2>
<p>仔细思考，在朴素的方案中，由于递归数据结构，它天然就保证了节点的有序性，而且从类型系统上就保证了它是严格的树形结构。</p>
<p>至于使用 <code>Rc</code> 和 <code>RefCell</code> 的方式，其实是完全可以用其表示链表结构——有点像一棵退化的树，也可以表示更复杂的图结构——然而这种情况下极易发生循环引用而引发内存泄露。</p>
<p><code>Arena</code> 的方案其实也无法保证一定是树形结构，不过反过来说，它也可以轻易扩展成更复杂的图结构，而且也不会有内存问题。</p>
<p>从使用的难易程度来看，递归数据结构和 <code>Arena</code> 都比较简单灵活，而 <code>Rc</code>+<code>RefCell</code> 的方式则需要多加注意。</p>
<p>而性能层面我没有具体计算和测试过，不过 <code>Arena</code> 中有诸多 <code>Hash</code> 和索引操作，所以可能是有不少额外开销的。<code>Rc</code>+<code>RefCell</code> 的方式也许略好，而如果是简单遍历，那么朴素方法应当是最好的。</p>
<p>其实除去这些之外，还有一个终极方案是 <code>unsafe</code>。事实上我个人觉得这种底层数据结构才是 <code>unsafe</code> 大展拳脚的地方。更上层的领域中所有权和借用等概念则是很好的帮手。因为 <code>unsafe</code> 有许多需要注意的点，我本人也没有太深入接触过，因此这里就不详细写了。</p>
<p>面对 <code>unsafe</code> 的一个基本态度是：先假定 safe 可以解决问题，待到实在不可行时才考虑 <code>unsafe</code>。</p>
<p>感谢阅读。</p>
<blockquote>
<p>2022/10/9 更新：</p>
<p>前段时间看了 <a
  href="https://rust-unofficial.github.io/too-many-lists/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>Too Many List</a> 这本书，颇为相见恨晚。作者深入浅出地解析了 Rust 中链表的各种写法，最终实现了一个生产级别的 Unsafe 双向链表。</p>
<p>无论是作为 Unsafe Rust 的入门书还是解决树形结构问题都是很好的参考书籍，推荐阅读。当然，也有些体会到 Unsafe 代码写起来战战兢兢的感觉，还是 Safe Rust 舒适 :D</p>
<p>另外，我在 <a
  href="https://crates.io"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>crates.io</a> 上发现了 <a
  href="https://crates.io/crates/slab"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>slab</a> 这个库，感觉可以一定程度上作为 Arena 方案来使用。</p>
</blockquote>
<blockquote>
<p>版权声明：本文采用 <a
  href="http://creativecommons.org/licenses/by/4.0/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>CC BY 4.0</a> 进行许可，转载请注明出处。</p>
<p>本文链接：<a
  href="http://idlercloud.xyz/posts/tech/tree_in_rust/"
  
  
  
  
  
>http://idlercloud.xyz/posts/tech/tree_in_rust/</a></p>
</blockquote>]]></description>
</item><item>
  <title>Linux 通过 gogs 或 gitea 自建 Git 服务</title>
  <link>http://idlercloud.xyz/posts/tech/self-build_git_service_with_gitea/</link>
  <pubDate>Thu, 11 Aug 2022 22:09:03 &#43;0800</pubDate>
  <author>idlercloud</author>
  <guid>http://idlercloud.xyz/posts/tech/self-build_git_service_with_gitea/</guid>
  <description><![CDATA[<p>之前写课设时因为需要合作，于是在服务器上搭建了一个临时、简陋的 git 服务。</p>
<p>没有 web 界面，纯命令行交互，添加密钥都要手动 ssh 到服务器。</p>
<p>这次就尝试用开源应用搭建一个功能完善、使用方便、颜值能打的 git 服务。</p>
<h2 id="gogs">gogs</h2>
<p><a
  href="https://gogs.io/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>官网地址</a></p>
<p>国人大佬维护的、以 Golang 开发、支持 Linux、macOS、Windows 和基于 ARM 的操作系统的易用 Git 服务。</p>
<p>它的优点是所需性能极低，甚至可以在树莓派上运行起来；使用极其简单，只需几步设置。</p>
<p>预览（图片来自官网）</p>
<p></p>
<h3 id="通过-docker-使用">通过 Docker 使用</h3>
<p>这里假设你已经安装好 docker，并且懂得基本的使用。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 拉取官方镜像</span>
</span></span><span class="line"><span class="cl">docker pull gogs/gogs
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 本地创建存放数据的目录</span>
</span></span><span class="line"><span class="cl">mkdir -p /var/gogs
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 运行镜像</span>
</span></span><span class="line"><span class="cl">docker run --name<span class="o">=</span>gogs -p 10022:22 -p 10880:3000 -v /var/gogs:/data gogs/gogs
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>docker run</code> 中的两个 <code>-p</code> 分别代表着 ssh 服务和主服务，将容器内的 22 号端口和 3000 号端口分别映射到外界的 10022 和 10880 端口。</p>
<p>注意，如果你看了一些过期的教程，它们可能让你将 3000 映射到 10080。从前这是可以的，但是某个版本之后，Chrome 因为安全原因禁止了 10080 端口的访问（Edge 和 Firefox 应该也是）。如果你用 10080，可能就会看到 <code>error: kex_exchange_identification: client sent invalid protocol identifier</code> 的错误提示。</p>
<p>如果一切顺利，现在就可以通过 <code>服务器 IP:10880</code> 在浏览器中看到安装界面了。如下：</p>
<p></p>
<p>数据库可以选 MySQL、PostgreSQL 或 SQLite3。注意如果用 MySQL 需要 5.7 及以上版本。实际上大部分情况 SQLite3 就够用了。</p>
<p>然后是下面的应用基本设置。</p>
<p>一般情况下其它不动，尤其是运行系统用户，似乎必须写 git，因为 docker 的运行脚本里面好像硬编码了 RUN_USER 为 git。</p>
<p>下图红框框选出的三个最好自己决定。应用名称我不知道会影响什么，但域名和应用 url，正如图中提示所言，会影响 clone 的地址。</p>
<p></p>
<p>如果不加修改，最后仓库的 clone 地址就会类似这样：</p>
<p>
</p>
<p>下面还有可选设置，如邮件服务器、禁止用户注册等等，不一一介绍。</p>
<p>现在，点击“立即安装”即可。</p>
<p>如果没有在可选设置里面注册管理员帐号，那么默认第一个注册的用户即是管理员。</p>
<p>gogs 的一些设置可以在 <code>数据目录/gogs/conf/app.ini</code> 修改，如：</p>
<p><figure><a class="lightgallery" href="/images/gogs_settings.png" title="gogs 设置" data-thumbnail="/images/gogs_settings.png" data-sub-html="<h2>app.ini 位置</h2><p>gogs 设置</p>">
    
  </a><figcaption class="image-caption">app.ini 位置</figcaption>
  </figure></p>
<p>设置的名称和格式都比较清楚，如有疑问可以查看<a
  href="https://github.com/gogs/gogs/blob/main/conf/app.ini"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>仓库里的 <code>app.ini</code></a>。这是内嵌到二进制分发中的默认设置，其中有每个选项的英文介绍。</p>
<h3 id="二进制安装">二进制安装</h3>
<p>和 Docker 大同小异。这里参考一下<a
  href="https://gogs.io/docs/installation/install_from_binary"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>官方文档</a>。</p>
<p>根据自己的版本下载二进制文件，上传到服务器。比如我放在了网站目录，实际上随便放个地方都行。</p>
<p>然后这里有个需要注意的点，平时我们 ssh 到服务器可能一直都是用的 root 用户。</p>
<p>而如果你运行 <code>./gogs web</code> 时用的是 root 用户，应用设置里填的运行系统用户却是 git。那么最后就会报错 <code>运行系统用户非当前用户:git -&gt; root</code>。</p>
<p>实际上 git 服务也完全不需要 root 用户，我们应该切换到普通用户。</p>
<p>最好是用 git 这个用户名，这样最后 ssh 的 clone 地址就是 <code>git@xxxx</code>。不过如果你已经安装过 git，那么 git 这个用户可能已经被注册了，而且如果用 <code>su git</code> 切换到这个用户后似乎无法正常使用命令。</p>
<p>git 这个用户不行的话，就用 <code>sudo adduser</code> 另外创建用户，比如 <code>sudo adduser gogs</code>。按照指示完成创建，最后用 <code>su gogs</code> 切换过去即可。</p>
<p>cd 到二进制文件所在的目录，如果直接执行 <code>./gogs web</code> 可能显示权限不足，那么就先 <code>chmod +x gogs</code>。如果是用 SQLite3 的话，为了后续能创建数据库，这里还要进行一下 <code>chown gogs:gogs /www/wwwroot/repo.idlercloud.fun</code> 把目录的权限赋予给当前用户。</p>
<p>剩下的就和 docker 差不多了，不过最后 ssh clone 地址是 <code>gogs@xxxx</code>。</p>
<p>可能遇到的情况是，gogs 默认情况下使用的是 3000 端口。如果你的 3000 端口已经被占用，那可能就需要一些修改。</p>
<p>按照官方所说，你不应该修改源代码中的 <code>app.ini</code>，而是应该在二进制文件所在目录下新建 <code>custom/conf/app.ini</code>。（docker 方式安装无需担心这点）</p>
<p>你可以添加如下内容修改端口：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[server]
</span></span><span class="line"><span class="cl">HTTP_PORT        = 10880
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="gitea">gitea</h2>
<p><a
  href="https://github.com/go-gitea/gitea"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>官网地址</a></p>
<p>gitea 是 2016 年的时候从 gogs 项目中 fork 出来的。</p>
<p>似乎是策略不同，gitea 明显活跃程度更高一些，无论是 issue、PR 还是 commit 都远超 gogs。</p>
<p>我个人也觉得文档、功能、提示方面 gitea 做得更好。（仅个人感受，无意冒犯）</p>
<p>我直接尝试了二进制安装，参考<a
  href="https://docs.gitea.io/zh-cn/install-from-binary/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>官方教程</a>。</p>
<p>同样需要把目录权限赋予当前用户。</p>
<p>如果在 root 用户下启用 <code>./gitea web</code>，它会提示你 git 不需要用 root 用户并退出，硬要用 root 似乎也可以，按它的提示即可。</p>
<p>端口默认也是 3000，如有冲突解决方法和 gogs 类似。</p>
<p>官方提供了一个<a
  href="https://github.com/go-gitea/gitea/blob/main/custom/conf/app.example.ini"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>样例</a>来解释你可以设置的选项。</p>
<p>启动之后的设置和 gogs 基本一样，不过你可以看见，默认主题是暗色主题（我挺喜欢这个）</p>
<p>预览一下最终界面：</p>
<p></p>
<h2 id="ip-和端口映射">IP 和端口映射</h2>
<p>到现在为止，无论是 gogs 还是 gitea，也无论如何安装，用户都得通过 <code>服务器 IP:端口</code> 的方式访问主页，这无疑是很不便而丑陋的。</p>
<p>所以应当通过映射来使用域名直接访问。</p>
<p>可以参考我的<a
  href="http://idlercloud.fun/posts/blog_site_note_1/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>「个人博客建站笔记」1.网站建成</a>中域名解析的部分。</p>
<p>在你的域名服务上提供的 DNS 解析里添加 A 记录。比如我是将 <code>repo.idlercloud.fun</code> 解析到自己的服务器 IP。</p>
<p>DNS 解析对端口是一无所知的，所以现在得通过 <code>repo.idlercloud.fun:端口号</code> 来访问 git 服务，还是比较丑。</p>
<p>下一步就是通过宝塔的反向代理来解析端口。如果你不是用宝塔，那么可以根据你使用的 web 服务器软件，如 nginx、apache，去百度或谷歌搜索反向代理的方法。</p>
<blockquote>
<p>你也可以顺手给这个网站申请个 SSL 证书</p>
</blockquote>
<p></p>
<p>如上图，在宝塔后台设置反向代理，名称随意填，目标 URL 代表你实际要访问的地址，可以填入 <code>http://服务器IP:端口号</code>，发送域名就填上刚刚解析的域名即可。</p>
<p>现在，应该可以直接通过域名进入 git 服务了。</p>
<p>恭喜你完成了自建 git 服务。<em>★,°</em>:.☆(￣ ▽ ￣)/$:<em>.°★</em> 。</p>
<p>如有疑问，欢迎评论留言~</p>
<blockquote>
<p>版权声明：本文采用 <a
  href="http://creativecommons.org/licenses/by/4.0/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>CC BY 4.0</a> 进行许可，转载请注明出处。</p>
<p>本文链接：<a
  href="http://idlercloud.xyz/posts/tech/self-build_git_service_with_gitea/"
  
  
  
  
  
>http://idlercloud.xyz/posts/tech/self-build_git_service_with_gitea/</a></p>
</blockquote>]]></description>
</item><item>
  <title>使用 WSL2 时碰到的小问题</title>
  <link>http://idlercloud.xyz/posts/tech/wsl_rust_tips/</link>
  <pubDate>Thu, 11 Aug 2022 21:02:21 &#43;0800</pubDate>
  <author>idlercloud</author>
  <guid>http://idlercloud.xyz/posts/tech/wsl_rust_tips/</guid>
  <description><![CDATA[<p>写这篇博客时，我因为 CS110L 的作业要求必须安装 Linux 环境。几番周折最后选择了 Windows 下的 WSL2。现在看来很不错。</p>
<p>过程中也遇到一些小坑：</p>
<ol>
<li>磁盘占用问题，<code>wsl --install</code>默认安装在 C 盘</li>
<li>代理问题 &ldquo;# Failed to establish a socket connection to proxies: [&ldquo;PROXY XXX.XXX.XXX.XXX:7890&rdquo;]&rdquo;</li>
<li>换源问题，源和系统版本不一致导致升级的包不对</li>
<li>Rust 编译报错&quot;/usr/bin/ld: cannot find Scrt1.o: No such file or directory&quot;</li>
</ol>
<p>下面一一详细记录了问题和解决方案，参考了很多网上的方法，都附了链接。</p>
<h2 id="磁盘占用问题">磁盘占用问题</h2>
<p>安装 WSL2，刚开始我用的是微软文档里写的方法，直接在命令行里<code>wsl --install</code>。后来我忽然意识到，这样安装的系统默认是在 C 盘的。而我的 C 盘早都红了，只留下 7、8 个 G 的样子。考虑到未来的使用恐怕是不足够的。</p>
<p>好嘛，只好先卸载 WSL 了。准确来说是卸载 WSL 里面安装好的 Linux 发行版。这个找网上教程即可。</p>
<blockquote>
<p>顺便一提，如果不用<code>wsl --install</code>，按照网上找到的教程，你需要手动去控制面板打开 Windows 的 WSL 选项。重启后再去手动下载 ubuntu 发行版。<code>wsl --install</code>应该是帮你把这两步都做了，但是还是需要重启的，它会在重启后才安装 Linux 发行版。</p>
</blockquote>
<p>想要自定义安装路径，就需要手动下载 ubuntu 安装包，在<a
  href="https://docs.microsoft.com/zh-cn/windows/wsl/install-manual"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>微软 WSL2 文档</a> 中查看发行版列表。如下</p>
<p></p>
<p>如果本文附带的链接失效了，你可以自己去搜索微软的 WSL2 文档。</p>
<p>点击上图中你想要的发行版，就会开始下载。另外提一句，最上面的 Ubuntu 似乎是 20.04 版本的，不知道它和下面的 Ubuntu 20.04 有什么区别。</p>
<p>下载好的文件大概是这个样子。</p>
<p></p>
<p>直接运行它会直接通过 Microsoft Store 安装，不过我们不这么做（因为可能改不了路径）。我们把它当作压缩文件打开，比如改后缀打开，或者右键、打开方式里选压缩软件打开。内容大致如下。</p>
<p></p>
<p>里面有很多东西，不过比较大的就一个 x64 结尾，一个 ARM64 结尾。根据架构自行选择即可。</p>
<p>把这个 <code>.appx</code> 文件当作压缩文件解压。如果不行，就先把它后缀的改成 <code>.zip</code> 再解压。解压的目标位置就是你希望 Linux 发行版安装的位置。</p>
<p>现在你应该得到了一堆文件，其中应该有一个很显眼的 <code>ubuntu.exe</code>。运行它，等待安装就可以了。最后它可能会生成一个 <code>.vhdx</code> 文件，这应该就是你的 Linux 发行版系统内部所有文件的存储位置了（所以其它文件可以删了）。</p>
<p>最后，在命令行输入 <code>wsl</code>，就可以启动 Linux 系统啦。</p>
<p>参考文章：<a
  href="https://zhuanlan.zhihu.com/p/263089007?ivk_sa=1024320u"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>自定义 WSL 的安装位置，别再装到 C 盘啦</a></p>
<h2 id="代理问题">代理问题</h2>
<p>如果你挂了梯子，那么可能在 WSL 里遇到问题。你可能会看到类似于 <code># Failed to establish a socket connection to proxies: [&quot;PROXY XXX.XXX.XXX.XXX:XXXX&quot;]</code> 这样的错误。而且你会发现，在 Windows 上能访问 Google 等网站，在 WSL 上用 <code>wget</code> 等命令就无法访问。</p>
<p>此时可以先去 powershell（注意在宿主机，也就是 Windows 上）执行 <code>ipconfig</code> 查看 WSL 的 IPv4 地址。类似于下图</p>
<p></p>
<p>假设你查询到的 IP 地址是 XXX.XXX.XXX.XXX，那么就在 WSL 上修改 <code>http_proxy</code> 和 <code>https_proxy</code> 这两个环境变量。比如用<code>export</code>命令。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">http_proxy</span><span class="o">=</span><span class="s2">&#34;http://XXX.XXX.XXX.XXX:PORT&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">https_proxy</span><span class="o">=</span><span class="s2">&#34;http://XXX.XXX.XXX.XXX:PORT&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>其中 PORT 是你的代理软件开放的 LAN 端口，对于 clash 而言是 7890。（2022/8/11 时）</p>
<p>注意 <code>https_proxy</code> 的值不需要是 <code>https</code>，否则未来很可能在使用 <code>curl</code> 时出现 OpenSSL 错误。</p>
<p>这个命令是每次打开 WSL 都要输的，你可以用别名来简化流程，也可以设置 /etc/profile 文件来一劳永逸。</p>
<p>而且你还需要打开你代理软件的“允许 LAN”的选项。如果你用的是 Clash for Windows，就是首页的那个 Allow LAN。</p>
<p>如果现在还不行，有可能是防火墙的问题，在控制面板-&gt;系统和安全-&gt;Windows Defender 防火墙-&gt;允许应用通过 Window 防火墙中，把你的代理软件的相关项全部打上勾。</p>
<p>现在在 WSL 里应该也可以访问 Google 了。</p>
<p>如果某一天你发现 WSL 里面代理又不好使了，可以重新在 Windows 下输入 <code>ipconfig</code> 查看 WSL 的 IP 地址。这个地址不是固定的，有可能变化。</p>
<p>参考博客：<a
  href="https://blog.lishunyang.com/2021/02/wsl2-dev-env.html"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>WSL 开发环境的坑（不定期更新）</a></p>
<h2 id="换源问题">换源问题</h2>
<p>换源也不是随便换的。</p>
<p>首先用命令 <code>lsb_release -a</code>，查看自己的发行版本和代号。</p>
<p>比如我用的这个是 ubuntu 20.04 代号为 <code>focal</code>。</p>
<p>那么相应的，换源时就得注意这个代号。</p>
<p>首先用 <code>sudo vim /etc/apt/sources.list</code> 打开文件（如果你不会使用 vim 就用别的文本编辑器）</p>
<p>然后删除原来的内容，输入</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">#阿里源
</span></span><span class="line"><span class="cl">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse
</span></span><span class="line"><span class="cl">deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse
</span></span><span class="line"><span class="cl">deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse
</span></span><span class="line"><span class="cl">deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse
</span></span><span class="line"><span class="cl">deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse
</span></span><span class="line"><span class="cl">deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse
</span></span><span class="line"><span class="cl">deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse
</span></span><span class="line"><span class="cl">deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse
</span></span><span class="line"><span class="cl">deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse
</span></span><span class="line"><span class="cl">deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse
</span></span></code></pre></td></tr></table>
</div>
</div><p>注意看，其中有 <code>focal</code> 这个代号，一定要和自己版本的代号一致。</p>
<p>换完源之后别忘了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">sudo</span> <span class="nb">apt-get</span> <span class="n">update</span>    <span class="c"># 更新源</span>
</span></span><span class="line"><span class="cl"><span class="n">sudo</span> <span class="nb">apt-get</span> <span class="n">upgrade</span>   <span class="c"># 更新软件包</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>参考博客：<a
  href="https://blog.csdn.net/WU2629409421perfect/article/details/110881141"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>Ubuntu 20.04 &amp;&amp; Ubuntu 18.04 修改 apt 源</a></p>
<h2 id="rust-编译报错">rust 编译报错</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">/usr/bin/ld: cannot find Scrt1.o: No such file or directory
</span></span><span class="line"><span class="cl">/usr/bin/ld: cannot find crti.o: No such file or directory
</span></span></code></pre></td></tr></table>
</div>
</div><p>这个可能是因为我刚开始换源没换对引发的错误。</p>
<p>总之如果你出现这个问题，可以尝试按上面操作换到正确的源上，然后更新一下试试。</p>
<p>如果不行的话，再使用 <code>sudo apt-get install libc6-dev</code> 安装软件包。这样应该能解决问题了。</p>
<p><a
  href="https://blog.csdn.net/weixin_42255281/article/details/110820663"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>usr/bin/ld: cannot find crti.o: No such file or directory</a></p>
<h2 id="总结">总结</h2>
<p>WSL2 要占用不少内存，不过使用起来体验比 VMWare 要好很多。如果你不是很在乎图形界面的话，那么推荐可以尝试一下。（其实也有在 WSL2 中使用 GUI 的方法，不过似乎要 Win11）</p>
<blockquote>
<p>版权声明：本文采用 <a
  href="http://creativecommons.org/licenses/by/4.0/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>CC BY 4.0</a> 进行许可，转载请注明出处。</p>
<p>本文链接：<a
  href="http://idlercloud.xyz/posts/tech/wsl_rust_tips/"
  
  
  
  
  
>http://idlercloud.xyz/posts/tech/wsl_rust_tips/</a></p>
</blockquote>]]></description>
</item><item>
  <title>最长公共子序列 (LCS) 在 diff 命令中的应用——Myers 算法</title>
  <link>http://idlercloud.xyz/posts/tech/lcs_for_diff_myers/</link>
  <pubDate>Thu, 11 Aug 2022 18:52:26 &#43;0800</pubDate>
  <author>idlercloud</author>
  <guid>http://idlercloud.xyz/posts/tech/lcs_for_diff_myers/</guid>
  <description><![CDATA[<p>今天 (2022/2/26) 做 CS 110L 的 week2 作业，内容是用 Rust 编写一个简单的 <code>diff</code> 命令。</p>
<p>我才知道原来 Linux 和 Git 的 <code>diff</code> 命令，它的底层算法之一叫做 Myers 算法，而其根本原理是最长公共子序列。</p>
<p>本文讲述 <strong>LCS 的使用和 Myers 算法</strong>。前置知识是动态规划求解 LCS。</p>
<!--more-->
<h2 id="diff-命令做了什么">diff 命令做了什么</h2>
<p>如果你常用 GitHub，应该经常可以看到如下界面。</p>
<p></p>
<p>这表示 <code>diff</code> 命令显示出的本次提交和仓库里之前版本的区别。如你所见，红色、以 <code>-</code> 开头的行代表删除，绿色、以 <code>+</code> 开头的行代表新内容。</p>
<p>你可能会说，上图这样明显是对同一行进行修改，而并没有删除或者添加行啊。确实，但是仔细想想，修改的操作其实可以等价地转换为删除原来的行，然后添上修改之后的行。</p>
<p>这样的等价转换对于底层算法的实现是比较有利的。</p>
<p>我们把代码不同版本的对比问题抽象一下。首先是代码，代码是一个行构成的序列，也就是说，它的先后关系是重要的；那么，两个版本的代码之间的比较，就相当于两个序列之间的比较。</p>
<p>除去删除或者添加的行，你可以看到还有很多不变的行。它们就是两个序列所共有的成分。而你可以想一下，删除的行，实际上是旧版本代码的特有内容；新添的行，实际上是新版本代码的特有内容。</p>
<p>那么每个代码都是由特有和共有的内容混合组成的，如下。</p>
<p>code1: 共有 1 旧特有 1 共有 2 旧特有 2 旧特有 3 共有 3</p>
<p>code2: 共有 1 共有 2 新特有 1 共有 3 新特有 2</p>
<p>我们要做的，其实就是判断两个代码之间哪些是共有、哪些是旧版本特有，哪些是新版本特有的。</p>
<p>到这你就可以想到了，共有的成分，那不就是公共子序列吗。</p>
<h2 id="最长公共子序列lcs">最长公共子序列(LCS)</h2>
<p>这一部分我假定你是有相关基础的，如果没有的话建议去搜几篇文章看看。</p>
<p>我们来回忆一下，LCS 描述这样一种问题：在两个序列中，找到它们共有的最长的子序列。序列一是 <code>1 2 3 4</code>，序列二是 <code>1 3 4 5</code>，那么 LCS 就是 <code>1 3 4</code>。</p>
<p>LCS 的求法，比较常规的是动态规划 $O(n^2)$ 求解。</p>
<p>假定两个序列是 <code>s1</code> 和 <code>s2</code>，长度分别为 <code>n</code> 和 <code>m</code>，我们定义二维数组 <code>dp[n+1][m+1]</code>（+1 是为了方便）。<code>dp[i][j]</code> 表示“<code>s1</code> 前 <code>i</code> 项和 <code>s2</code> 前 <code>j</code> 项的 LCS 的长度”。那么就有如下状态转移函数。</p>
<p>$$
\begin{aligned}
dp[i][j]=
\begin{cases}
&amp;0,&amp;若 i=0 或 j=0\\
&amp;dp[i-1][j-1]+1,&amp;若s[i-1]=s[j-1]\\
&amp;max(dp[i-1][j],dp[i][j-1]),&amp;若s[i-1]\ne s[j-1]
\end{cases}
\end{aligned}
$$</p>
<h2 id="myers-算法">Myers 算法</h2>
<p>如果让你用 LCS 来做 <code>diff</code>，你会如何完成？我的第一想法是，从<code>dp[n][m]</code>开始，可以依次往上追溯，找到所有的公共项。那么两个序列中剩下的部分就是各自特有的了。</p>
<p>Myers 算法也是这个思路，不过它稍微高明一些，在回溯的过程中就同时判定公共项和特有项。</p>
<p>我们先来看一张图。</p>
<p></p>
<blockquote>
<p>图片来自<a
  href="https://www.cnblogs.com/zqybegin/p/13734107.html"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>这个博客</a></p>
</blockquote>
<p>上图是序列 <code>ABCBDAB</code> 和 <code>BDCABA</code> 的 dp 结果。箭头表示转移路径。</p>
<p>如你所见，从最右下角出发，沿着路径一直向左上方找到起点（灰色底色）。</p>
<p>Myers 算法的思路就是：如果它是向左上转移，说明这是公共部分；如果向上转移，那么它就是第一个序列的特有部分；如果向左转移，那么就是第二个序列的特有部分。</p>
<p>C++ 代码如下（Rust 直接改的，我没测试）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">print_diff</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="o">&amp;</span><span class="n">dp</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">s1</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">s2</span><span class="p">,</span> <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="kt">int</span> <span class="n">j</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">s1</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">s2</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">print_diff</span><span class="p">(</span><span class="n">dp</span><span class="p">,</span> <span class="n">s1</span><span class="p">,</span> <span class="n">s2</span><span class="p">,</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;  &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">s1</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">j</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">]))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">print_diff</span><span class="p">(</span><span class="n">dp</span><span class="p">,</span> <span class="n">s1</span><span class="p">,</span> <span class="n">s2</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;+ &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">s2</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">j</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">]))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">print_diff</span><span class="p">(</span><span class="n">dp</span><span class="p">,</span> <span class="n">s1</span><span class="p">,</span> <span class="n">s2</span><span class="p">,</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">j</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;- &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">s1</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>你可以看到，它是一个递归的做法，以此来让输出顺序颠倒。</p>
<p>你也可以不用递归，每次把输出结果存在一个 <code>stack</code> 中，以此用循环完成。</p>
<h2 id="总结">总结</h2>
<p>有了以上知识点，想实现 <code>diff</code> 就很容易了。我们可以用 <code>getline</code> 之类的读入代码，用一个 <code>vector&lt;string&gt;</code> 存储，每一项存储一行代码。然后再用一个 LCS 函数求出 <code>dp</code> 数组。最后传 到<code>print_diff</code> 函数，就可以得到结果了。</p>
<p>不过，LCS 的 DP 求解算法复杂度是 $O(n^2)$，而且据说被证明不可改进。所以据说实践中常常用一些线性复杂度的近似算法。</p>
<blockquote>
<p>版权声明：本文采用<a rel="license" href="http://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a>进行许可，转载请注明出处。</p>
<p>本文链接：<a
  href="http://idlercloud.xyz/posts/tech/lcs_for_diff_myers/"
  
  
  
  
  
>http://idlercloud.xyz/posts/tech/lcs_for_diff_myers/</a></p>
</blockquote>]]></description>
</item><item>
  <title>「工具推荐——软件」1.WGestures：鼠标手势</title>
  <link>http://idlercloud.xyz/posts/tech/recommand_tool_wgestures/</link>
  <pubDate>Thu, 11 Aug 2022 17:20:02 &#43;0800</pubDate>
  <author>idlercloud</author>
  <guid>http://idlercloud.xyz/posts/tech/recommand_tool_wgestures/</guid>
  <description><![CDATA[<p>这个系列主要是推荐一些计算机上好使用的工具。目前计划是除去软件，还会分享一些网站，所以也细分开来了。</p>
<p>本文介绍 <strong>WGestures，一个免费开源的鼠标手势软件</strong>。</p>
<h2 id="功能介绍">功能介绍</h2>
<p>你曾经也许在某些浏览器中接触过鼠标手势。我最初是在猎豹浏览器上用到的，虽然浏览器的整体使用感觉没那么好，但是鼠标手势这一项却是非常不错。</p>
<p>后来换到 Chrome，再到 Vivaldi，再到 Edge，始终没有更好的体验。实际上它们有的压根就不支持鼠标手势，也是蛮遗憾的。</p>
<p>Chrome、Edge 的插件里有很多鼠标手势相关的，我用过几款，只能说大失所望（很久之前了，现在不知道如何）。</p>
<p>今天要推荐的这款 WGestures，几乎解决了我的所有痛点。而且不仅仅是局限于浏览器中，它是在整个系统上都可以使用的全局鼠标手势软件。</p>
<p>下面是两张示例，图片来自于 WGestures 的 <a
  href="https://github.com/yingDev/WGestures"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>Github 仓库</a>。</p>
<p>
</p>
<p>如你所见，你可以用一个鼠标手势来执行一个动作，而且它会在屏幕下方展示出手势的名称，防止误操作。</p>
<p>除去这个之外，它还支持一个叫做触发角 &amp; 摩擦边的功能。只需要把鼠标移动到屏幕的四个角落或者是在四条边上摩擦就可以执行相应的动作。不过因为我比较多动症，很容易误触发，所以就没用它。</p>
<p>WGestures 支持 Windows7+。它有一个升级的界面更优美、功能更丰富的第二版，WGestures2，除了 windows 还支持 macOS，不过这是一个付费软件，大约需要三四十人民币的样子。</p>
<p>下载地址：<a href="http://www.yingdev.com/projects/wgestures" target="_blank" rel="noopener">官网</a>。</p>
<h2 id="软件特点">软件特点</h2>
<p>接下来讲一讲 WGestrues 一些很对我胃口的点。</p>
<p>首先是，它高度可定制化，这表现在两点。</p>
<p>第一，它是开源软件，这意味着你如果对软件功能不满意，完全可以从代码层面上进行自己的修改。它的源码是 C# 写的。</p>
<p>第二，设置丰富且简明。它可以设置的东西包括且不限于：开机运行、自动更新、是否显示手势名称和轨迹、轨迹颜色等等。手势触发的动作也可以自己选择，甚至可以让手势执行代码（支持 Lua 脚本）。</p>
<p>它还有一个有点是占用性能极低，我运行时仅占用 15M 的内存。</p>
<h2 id="使用指南">使用指南</h2>
<p>这是软件界面。</p>

<p>如你所见，上面的选项已经十分清楚了，如果有不理解它意思的，将鼠标放上去会有详细介绍。</p>
<p>这里讲一下，手势键里的“X 键”，实际上是某些鼠标上会附加的网页前进和网页后退键（一般在鼠标的侧面）。然后就是按 Ctrl-Shift-Alt+W 可以停止使用鼠标手势，在打游戏时很好用。</p>
<p>更重要的是“手势”页，如下</p>

<p>左侧的边框里，可以选择全局设置或者是针对某些软件进行特殊设置。而右侧就可以设置你想要的鼠标手势了，触发上面那些手势，就可以执行下面设置的相应动作，可以看到功能极其丰富。</p>
<h2 id="总结">总结</h2>
<p>这款软件给我带来了不少的助力，算是提高了一些工作效率吧，而且它简单易用的设置实在深得我心，可以说是我最喜欢的软件之一了。</p>
<p>第一期软件介绍到此结束啦。如果你有想推荐的软件，欢迎联系我投稿哦。</p>
<blockquote>
<p>本文采用 <a
  href="http://creativecommons.org/licenses/by/4.0/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>CC BY 4.0</a> 进行许可，转载请注明出处。</p>
<p>本文链接：<a
  href="http://idlercloud.xyz/posts/tech/recommand_tool_wgestures/"
  
  
  
  
  
>http://idlercloud.xyz/posts/tech/recommand_tool_wgestures/</a></p>
</blockquote>]]></description>
</item><item>
  <title>「个人博客建站笔记」2.网站的布局</title>
  <link>http://idlercloud.xyz/posts/tech/blog_site_note_2/</link>
  <pubDate>Thu, 11 Aug 2022 11:21:45 &#43;0800</pubDate>
  <author>idlercloud</author>
  <guid>http://idlercloud.xyz/posts/tech/blog_site_note_2/</guid>
  <description><![CDATA[<p>本文讲述<strong>如何优化 WordPress 网站的界面布局</strong>。</p>
<ul>
<li>涉及内容：网站后台、主题、PHP、HTML、CSS。</li>
<li>面向人群：新手。</li>
<li>前置知识：WordPress 网站的搭建（见<a
  href="https://idlercloud.fun/posts/blog_site_note_1"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>「个人博客建站笔记」——1.网站建成</a>）。</li>
</ul>
<h2 id="网站后台">网站后台</h2>
<p>如果你刚刚搭建好一个 WordPress 网站，那么此时你应该得到了一个默认主题下的主页，只有一个示例页面。</p>
<p>此时网页的功能很简陋，几乎只能写写文章，发发评论。像什么标签、分类、留言板都没有。而且默认的主题可能和你的审美对不上，还有标题字体太小、主页面背景不好等问题。</p>
<p>那么就需要利用网站的后台进行一些自定义的设置了。</p>
<p>点击左上角仪表盘的标志，或者在你网址的后方加上 <code>/wp-admin</code>，就可以进入后台。</p>
<p>后台左侧的菜单里有很多选项，这里不一一细讲。</p>
<p>不过值得一提的是，在默认的主题下，你可以在外观-编辑器（beta 版）里可视化地调整页面布局，这一点还是很方便的。外观-自定义是另一个方便的工具，也是可以即时预览你的修改的，你还可以在里面设置网站的名称、副标题和图标。</p>
<p>当然，上述修改大多只是小幅微调，想要有大的整体页面上的变化，需要你进行很多很细致的调整。真正一步到位，改变整个网站的是接下来介绍的主题。</p>
<h2 id="主题">主题</h2>
<p>如同很多软件一样， WordPress 同样有主题系统。它的主题不仅改变网页的样式，还会更改网页的交互逻辑，比如，如何登录、如何评论等等。</p>
<p>在后台的外观-主题页面里，你可以在线搜索主题，也可以上传一个 zip 包压缩的主题。主题的推荐可以去知乎等地求解。就我所知许多开发者会在 Github 上开源他们的主题，我之前用的 WordPress 主题就是 <a
  href="https://github.com/dimpurr/Clearision"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>Github 上面</a>下载，然后自己做了一些修改。</p>
<p>一些比较完善的主题会提供友好的界面来让你进行一定程度的定制，而无需写代码。如果你没有什么代码基础，那么还是建议仔细挑选一个这样的主题。不过再如何完善，其自由度也很难及得上写代码。</p>
<p>大多数时候，用好主题就可以得到一个令人满意的优美网站，不过如果你还想要更多、更个性化的定制，那么你可以继续往下阅读，我会讲一些前端和后端相关的代码处理。而如果你不想写代码，可以跳到最后，我会推荐一些个人感觉不错的免费主题。</p>
<h2 id="html">HTML</h2>
<p>一般地，网页本质上都是 HTML 代码构成的。</p>
<p>HTML 中文名称超文本标记语言(Hyper Text Markup Language)，听上去很厉害，其实所谓超文本就是说，它能够表达的内容不单单是文本。</p>
<p>如下代码就表示一个文字内容为“只能按”的按钮。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">button</span><span class="p">&gt;</span>只能按<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>它真正表现在网页上就是这个样子：<button>只能按</button>。</p>
<p>层层嵌套的 HTML 代码，可以生成功能十分丰富的网页。</p>
<p>比如你现在看的这个网页，你可以在空白处右键，可能就会有“查看网页源代码”的选项。你将会在其中看到整个网页的 HTML 形式，如果你将它复制下来存到本地再打开，完全可以得到一个一模一样的网页。</p>
<p>当然，只是看上去一样，实际上去你去点那些按钮，可能都是毫无反应的，因为网页系统往往是由很多个 HTML 文件构成，而且还会依托其它的一些东西。</p>
<p>比如说，CSS，或称层叠样式表(Cascading Style Sheets)。</p>
<h2 id="css">CSS</h2>
<p>HTML 描述网站的内容，但它对于内容的样式、形貌的表达力是比较薄弱的。</p>
<p>比如你想要控制刚刚那个按钮，它背景色什么样子、前景色什么样子、字号多大，距离右边框多远等等。HTML 很难完成这些，而这就是 CSS 发光发热的领域了。</p>
<blockquote>
<p>事实上，你应该很少会需要写 HTML 代码，因为它是主管内容的——而我们有更好的、可视化的方式来管理内容，比如 markdown 或者是 WordPress 自带的编辑器。相对来说你可能会和 CSS 打更多交道，它是主管外貌的。</p>
</blockquote>
<h2 id="php">PHP</h2>
<p>如果按照程序员的分类，HTML 和 CSS 所作的都是“前端”的工作，简单来说就是直接呈现在用户视觉上的效果。</p>
<blockquote>
<p>其实，传统的前端开发是使用 HTML+CSS+JavaScript 三件套的。不过我对 JS 目前没有太多了解，就先不写了。</p>
</blockquote>
<p>而这背后，当然还需要一个工具人，处理网页和服务器之间的数据交换。</p>
<p>PHP 是一个后端开发的语言。</p>
<p>目前我最常用到 PHP 的场景，其实是需要做条件判断的时候。比如用户是否登录，肯定是要展现不一样的界面的；还有就是根据权限隐藏掉一部分不太好展示的东西。</p>
<h2 id="例子clearision">例子：Clearision</h2>
<p>Clearision 是之前本站的主要主题。它相对来说功能比较简陋，但是界面我蛮喜欢的。</p>
<p>而且功能简陋，所以代码逻辑也比较好理解、好修改。</p>
<p>所以接下来我就以它为例子，讲一讲怎么自定义主题。</p>
<h3 id="主题提供的设置">主题提供的设置</h3>
<p>正如大部分主题，Clearision 在后台提供了一些设置方便自定义网页的外观和交互。如下：</p>
<p></p>
<p>在这里你可以设置主页上的 Logo 头像、网页的图标、社交主页的网址、是否显示访客环境、是否显示作者等。</p>
<p>整体而言功能不多。</p>
<h3 id="修改主题文件">修改主题文件</h3>
<p>接下来是比较关键的部分。在 Clearision 设置的下方，可以看到主题文件编辑器。</p>
<p></p>
<p>是的，接下来就需要修改代码了。</p>
<p>首先要提一点的是，Wordpress 官方推荐使用子主题的方式来自己修改主题，这样的好处是如果原主题更新了，不会覆盖掉自定义的内容。方法可以在 wordpress 的教程里找到。</p>
<p>对于 Clearision 没有这个必要，一来是原主题已经很久没更新过了，估计以后也不会更新了，二来是子主题的方案还是会导致一些问题（如缓存等）。</p>
<p>我们直接在原文件里更改就行。也就是上图右侧那些主题文件。有些文件的中文会指出它的用处。</p>
<p>这些文件的加载顺序、逻辑结构也是很有讲究的，这里不深究，有兴趣可以去自行搜索。</p>
<p><code>functions.php</code> 和 <code>style.css</code> 是我经常打交道的两个。</p>
<p><code>functions.php</code> 添加一些功能性的操作。比如说我想修改用户注销之后跳转的界面，就可以在里面加入如下内容</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="c1"># 注销后重定向至
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">add_action</span><span class="p">(</span><span class="s1">&#39;wp_logout&#39;</span><span class="p">,</span><span class="s1">&#39;auto_redirect_after_logout&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">function</span> <span class="nf">auto_redirect_after_logout</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">	<span class="nx">nocache_headers</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	<span class="nx">wp_safe_redirect</span><span class="p">(</span> <span class="nx">home_url</span><span class="p">()</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k">exit</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>它也可以用来修改一部分的外观内容，主要是是否展示，而不管其细节。</p>
<p>而正如上面所言，<code>style.css</code> 主管整个网站的所有样式细节。</p>
<p>比如我想修改用户“发表评论”按键的样式，就可以这么写。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="c">/* 发表评论的样式 */</span>
</span></span><span class="line"><span class="cl"><span class="p">#</span><span class="nn">cmt_submit</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">margin</span><span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kp">-moz-</span><span class="k">box-sizing</span><span class="p">:</span> <span class="kc">border-box</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kp">-webkit-</span><span class="k">box-sizing</span><span class="p">:</span> <span class="kc">border-box</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">box-sizing</span><span class="p">:</span> <span class="kc">border-box</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kp">-webkit-</span><span class="k">border-radius</span><span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">border-radius</span><span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">background</span><span class="p">:</span> <span class="mh">#6f6f6f</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">color</span><span class="p">:</span> <span class="mh">#eee</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">font-weight</span><span class="p">:</span> <span class="mi">600</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">display</span><span class="p">:</span> <span class="kc">inline-block</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">border</span><span class="p">:</span> <span class="kc">none</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">cursor</span><span class="p">:</span> <span class="kc">pointer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kp">-webkit-</span><span class="k">border-radius</span><span class="p">:</span> <span class="mi">3</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">border-radius</span><span class="p">:</span> <span class="mi">3</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>语法部分我不讲，去找些教程有点基本的了解即可。</p>
<p>另外，CSS 中是可以重复定义一个元素（部件）的样式的。Clearision 原作者在 CSS 里面写了很多内容，如果想要修改怎么办？无需找到相关的内容然后修改，只要在最下方新添样式就可以了。后定义的样式会覆盖先定义的样式。</p>
<p>你可能在 CSS 编辑界面上方看到提示，说可以在“内建的 CSS 编辑器”中修改 CSS。</p>
<p>这个实际上就是我上面提到的外观-自定义里面的一个小功能，所谓的额外 CSS。界面大致如下：</p>
<p></p>
<p>在左侧的文本框中输入的 CSS 代码，会实时地同步到右侧的网页中，对于调整外观来说十分方便。</p>
<p>这个功能配上浏览器提供的“检查”（审核元素、开发者工具、F12）会如虎添翼。只需在想要修改样式的地方右键-&gt;检查，就会出现类似下面的界面（这是 Edge 浏览器的界面）</p>
<p></p>
<p>在右侧的开发者工具中就可以查看网页的 HTML 代码和 CSS 样式，甚至可以直接在里面修改。</p>
<p>你可能会说了，不会写代码怎么办？其实我也不是很会，CSS 和 PHP 我都没有系统学习过。大部分的代码其实都来自于网络，只要可以合理描述自己的需求，还是能够找到想要的内容的。</p>
<p>但是完全不会写代码还是很不便的。网上的代码质量参差不齐，而且可能有过期风险，也可能面临不同浏览器、不同屏幕分辨率等一系列问题。复制代码之后可能会还需要一些微调来解决这些问题。所以有更高需求的话建议还是沉下心来细细学习一下，总之不会亏。</p>
<h2 id="主题推荐">主题推荐</h2>
<p>下面是我用过的，比较适合个人博客的两款主题，都是简约风的。</p>
<p>就算你打算自定义主题，我也推荐你下载几个美观的主题看看。它们会给你增添灵感，而且你可以参考它们的代码实现。</p>
<h3 id="mdx">MDX</h3>
<p>这是我个人比较喜欢的另一个主题。功能丰富，界面简洁美观。如果我最先接触到它的话，也许就会使用它。</p>
<p><a
  href="https://mdx.flyhigher.top/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>主题主页</a>，<a
  href="https://github.com/yrccondor/mdx"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>Github 仓库</a></p>
<p>主题主页里有详细的展示，我建议你可以稍微看一下。下面我也会放一些本站使用该主题后的样貌。</p>
<p>首页：</p>
<p></p>
<p>文章：</p>
<p></p>
<p>这里我没有仔细去调整，实际上，在后台中有非常多的主题样式搭配。如图。</p>
<p></p>
<p>在我短暂的使用中，有两个功能让我很喜欢。</p>
<p>一个是开启夜间模式，另一个是目录。</p>
<p>现在的这个主题已经支持这两个特性了，很好用。（本站已经不是用 WordPress 而是 Hugo 了）</p>
<h3 id="indite">Indite</h3>
<p>这个主题可以直接在 Wordpress 后台里添加。</p>
<p>大致外观如下：</p>
<p></p>
<p>可以看到配色比较柔和，页面也很简洁。</p>
<p>这个主题的大部分功能都可以通过外观-自定义修改。不过里面的设置都是英文的，可能需要花些力气。</p>
<p>另外一点不太好的是，这个边栏太大了，影响阅读体验。</p>
<h2 id="总结">总结</h2>
<p>这就是本文的所有内容了。断断续续拖了一个月才完成，着实有些难写。</p>
<p>想写的内容其实还有很多，但是难以表述出来。如果有疑问的话欢迎评论区里提问。</p>
<blockquote>
<p>版权声明：本文采用 <a
  href="http://creativecommons.org/licenses/by/4.0/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>CC BY 4.0</a> 进行许可，转载请注明出处。</p>
<p>本文链接：<a
  href="https://idlercloud.fun/posts/blog_site_note_2/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>https://idlercloud.fun/posts/blog_site_note_2/</a></p>
</blockquote>]]></description>
</item><item>
  <title>「个人博客建站笔记」1.网站建成</title>
  <link>http://idlercloud.xyz/posts/tech/blog_site_note_1/</link>
  <pubDate>Wed, 10 Aug 2022 18:41:49 &#43;0800</pubDate>
  <author>idlercloud</author>
  <guid>http://idlercloud.xyz/posts/tech/blog_site_note_1/</guid>
  <description><![CDATA[<p>这是我在以前博客的第一篇文章，主要记述的是使用 WordPress 和宝塔 Linux 面板，从零开始搭建一个基础博客网站的过程。</p>
<ul>
<li>涉及内容：服务器、域名、域名解析、宝塔 Linux 面板、wordpress 的使用。</li>
<li>面向人群：纯新手，无基础。</li>
<li>前置知识：中文，部分英文。基础网络知识：如 IP 地址是什么，GB、Mbps 是什么单位。基础计算机知识：CPU、内存、硬盘空间是什么，能区分硬件和软件。</li>
</ul>
<blockquote>
<p>旧博客的建成，包括下述内容，有很大一部分是  <a
  href="https://tofu.icu/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>TriNitroTofu</a>  的功劳，大家有兴趣可以去看看。</p>
</blockquote>
<h2 id="基础概念">基础概念</h2>
<p>为了得到一个可以访问的网站，我们至少需要三个东西：</p>
<ol>
<li>服务器</li>
<li>域名</li>
<li>网站系统</li>
</ol>
<p>网站系统运行在服务器上，提供一个交互的界面，而别人就可以通过域名来访问网站，这就是三者的关系。</p>
<p>不用域名，直接使用 IP 地址进行访问似乎也是可行的，不过可想而知，那样也太劝退用户了。</p>
<p>下面就分别简单介绍一下这三个东西。</p>
<h2 id="服务器">服务器</h2>
<p>首先是挑选一个合格的服务器，这是三者之中最贵的一个。</p>
<h3 id="服务器的位置">服务器的位置</h3>
<p>服务器根据位置分为中国大陆和其他的。</p>
<p>中国大陆的服务器，如阿里云、华为云之类的，访问速度快，而且也比较便宜，但是最大的问题是需要进行<strong>备案</strong>。据说备案至少需要一个月，多则几个月，显然太缓慢了。</p>
<blockquote>
<p>据我所知阿里云有一些学生优惠，免费体验建站的，而且后续也蛮便宜</p>
</blockquote>
<p>至于其他的服务器，近的如日本、新加坡，远的如美国，到处都有。它们相对于大陆的服务器来说贵一些、延迟高一些，但好处是无需备案。</p>
<blockquote>
<p>我本来以为海外的服务器会被墙，实际上并非如此。不干坏事的话应该没问题。</p>
</blockquote>
<p>我选择的是其他服务器。</p>
<h3 id="服务器的配置">服务器的配置</h3>
<p>服务器的选择有很多讲究。</p>
<p>一是<strong>硬件配置</strong>。想要带得动一个能用的动态博客，至少需要 1.5G 及以上内存。1G 内存应该是比较危险的。CPU 要求不高的样子，我的 CPU 使用率一般都很低。然后就是硬盘空间，一般而言文字类博客也用不了太多，图片的话其实可以用图床。</p>
<p>二是<strong>网络配置</strong>。主要是流量和带宽，还有一个线路问题。首先是流量，我看到过别人的个人博客，一个月总共 30G 也用了很长一段时间了，需求量其实不算很大。带宽的话，个人博客网站应该是不需要多大的，知乎上有说 1M 宽带就够了的。还有一个线路问题，这个我不是很懂，据说 cn2 线路更快。买服务器的时候可能它不会直接提到线路，但是如果有 &ldquo;Asia/China Optimization&rdquo; 之类的字样，应该就是 cn2 线路的。</p>
<blockquote>
<p>目前我的网站平均占用 1G 左右内存，硬盘 5.6G。20 号建站到 23 号早晨为止，一共用了 1.4G 左右流量，大部分流量是在建站时候花费的，后面用的很少，</p>
</blockquote>
<p>三是<strong>系统</strong>。主要是 Linux 还是 Windows 的区别，目前我所见的基本都是 Linux，所以最好对 Linux 系统有一些基本的了解，无需太深入。Linux 又分为很多发行版，新人的话推荐用 Ubuntu 20.04。</p>
<h3 id="服务商的选择及服务器购买">服务商的选择及服务器购买</h3>
<p>以上知识了解了，我们可以开始考虑服务商了。国外的服务商我只知道两家，<a
  href="https://www.dmit.io/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>DMIT</a> 和 <a
  href="https://www.vultr.com/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>vultr</a>。前者贵一些，但是有 cn2 线路。后者未接入 cn2 线路，但是不仅便宜，而且还是按小时收费的。我选的是前者，这里简单介绍一下流程，可以跳过。</p>
<p>进入 <a
  href="https://www.dmit.io/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>DMIT</a> 的网站，注意右上角可以选择中文（不过是繁体）。创建账户进入客户中心，然后点击左上角的创建，选择伺服器。接下来就可以选服务器了。建议货比三家，仔细看看。注意有的是<strong>季缴</strong>有的是<strong>月缴</strong>。</p>
<p>选好套餐后点击右下角的继续，下一页是命名主机、设置 root 密码（root 相当于超级用户，拥有所有权限）、选择系统之类的，自己决定就好。然后就是喜闻乐见的付款环节了，结算页面的右侧有一个小框写着“Apply Promo Code”，这个是输优惠码的，如果你是在促销时候买，可能有折扣哦。</p>
<p>启动蓝色修改器，支付完毕后，服务器这一块暂时没什么问题了。</p>
<p>哦对了，查看服务器的时候，一般服务商会发给你公钥和私钥文件，注意私钥文件应该是只会出现一次的，下载后<strong>一定要做好备份，千万别丢了</strong>。丢了的话，不出意外就是丢失对服务器的控制权了，我不知道联系客服能不能解决问题。</p>
<h2 id="域名">域名</h2>
<h3 id="域名分类">域名分类</h3>
<p>作为一个互联网熟练用户，你应该已经见过不少域名后缀（学名叫顶级域名）了，像什么 <code>.com</code>、<code>.cn</code>、<code>.org</code> 乃至本站的 <code>.xyz</code>。</p>
<p>这些域名也是稍有不同的。</p>
<p>首先，搜索引擎对于不同域名的收录效率是不一样的。像是 <code>.com</code> 这种几十年的老域名，相对来说是快一些的；而<code>.top</code>、<code>.xyz</code>这些新兴域名，可能要慢一些。</p>
<p>其次，不同域名的价格可以差很多。不过一般来说按年租的话比服务器便宜很多。</p>
<p>然后就是，据说 <code>.cn</code> 需要备案（也许因为它是中国顶级域名），但是也有人说不需要，这个我不太清楚。</p>
<h3 id="域名购买">域名购买</h3>
<p>国内的话，可以在阿里云、百度云、华为云这些地方买。</p>
<p>而国外呢，我所知道的有 <a
  href="https://godaddy.com/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>GoDaddy</a>、<a
  href="https://www.name.com/zh-cn/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>name.com</a>、<a
  href="https://www.namesilo.com/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>namesilo</a>、<a
  href="https://www.namecheap.com/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>namecheap</a>。</p>
<p>我只知道 GoDaddy 是老牌子，而 name.com 便宜些。后两个只是听说性价比不错。我个人选择的是 name.com，它的名气似乎不是很大，以至于中文互联网上没找到什么教程。我就假设你是用的 name.com 了，其他网站的操作也差不了多少。</p>
<p>在购买域名之前，你需要先决定好网站的地址。顶级域名就那么些，你只能从中选，但是二级域名是由你决定的，如 <code>idlercloud.fun</code>。有些域名可能已经被人注册了，这时候可能你就只能换一个了，如果你实在很想要那个域名，那就得想办法联系拥有者商量了。</p>
<p>决定好域名，支付完成后，别着急，域名相关的东西还有下一个呢。</p>
<blockquote>
<p>买域名的时候，除去域名本身的费用外，还可能附加一些安全和隐私相关的内容。这部分买不买就取决于你了。不过 SSL 证书之后可以弄到免费的。</p>
</blockquote>
<h3 id="域名解析">域名解析</h3>
<p>域名购买好了。但是现在的问题是，这个域名和我们先前买好的服务器有任何关系吗？没有，在不同的商家买的两个东西，哪有什么关系。</p>
<p>接下来讲的就是把这两个东西联系起来，也就是所谓的 DNS 解析。</p>
<blockquote>
<p>简单理解一下 DNS 解析。你的服务器有个 IP 地址，假设是 123.123.123.123，然后你有个域名 <code>xxx.com</code>。DNS 解析要做的就是，当用户在浏览器地址栏输入 <code>xxx.com</code> 时，自动让用户访问 123.123.123.123 这个服务器的网站。</p>
</blockquote>
<p>购买好域名，进入后台，点进域名的界面。</p>
<blockquote>
<p>具体操作 (name.com)：右上角的用户图标下拉菜单点击 overview（概览），在下面找到自己的域名，如 <code>idlercloud.fun</code>，点进去。</p>
</blockquote>
<blockquote>
<p>另外，name.com 的最下方是可以选择语言的。</p>
</blockquote>
<p>差不多是下面这样一个界面。</p>
<p></p>
<p>点击上图框红的 &ldquo;Manage DNS Records&rdquo;（管理 DNS 记录）。可以看到下面的界面。</p>
<p></p>
<p>&ldquo;HOST&rdquo;（主机）就是你的网站地址，加不加 <code>www</code> 无所谓。而 &ldquo;ANSWER&rdquo;（回答）就写服务器的 IP 地址（可以在服务器商那里看到）。填好之后添加记录，OK，目前关于域名要做的就这么多。</p>
<h2 id="网站系统">网站系统</h2>
<p>网站系统，或者在我们这里更具体一些，博客系统。它控制网站的界面展示，用户和网站的交互，网站数据的存取等。</p>
<h3 id="网站系统的选取">网站系统的选取</h3>
<p>本站（之前）用的网站系统是 WordPress。</p>
<p>还有一个常用的是 typecho。我只听说过，下述对比也只是综合我所看到的评价。</p>
<blockquote>
<p>相对而言 WordPress 的功能更丰富，不过没有原生 markdown 支持。typecho 定位是纯粹的个人博客系统，而非 wordpress 这样的 CMS，所以相对来说更简洁一些。如果服务器配置不够，也许可以试试 typecho。</p>
</blockquote>
<blockquote>
<p>此外，推广一波 TriNitroTofu 大佬自己写的博客系统，<a
  href="https://github.com/trinitrotofu/December"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>December</a></p>
</blockquote>
<p>我们这里选用 wordpress，不过在此之前还需要先对服务器进行一些操作，让它更好用一些。</p>
<h3 id="连接服务器以及宝塔-linux-面板的使用">连接服务器以及宝塔 Linux 面板的使用</h3>
<p>购买好服务器之后，除了得到一个光秃秃的 IP 地址和后台的一些资源使用情况，我们所能做的最多其实也就是开机、关机、重启之类的。</p>
<p>所以需要想办法先连接上服务器，我们采用 SSH 连接的方式。</p>
<p>Windows 下需要用到一个叫做 PuTTY 的软件。这是<a
  href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>官网下载地址</a>。</p>
<p>
</p>
<p>启动后，在上面的红框 1 中输入服务器的 IP 地址，然后在左侧找到红框 2 中的 <code>Auth</code>（依次点击 <code>Connection-&gt;SSH-&gt;Auth</code>）。</p>
<p>然后点击红框 3 中，找到之前保存的服务商给你的服务器的私钥文件。</p>
<p>接着就可以点击 <code>open</code> 进行连接。</p>
<blockquote>
<p>PuTTY 似乎不会默认为你记住当前的配置，你下一次打开还需要再输一遍 IP，再选一遍私钥。解决方法是在首页 <code>Session</code> 那里的 <code>Saved Sessions</code> 给当前会话取个名，然后点右边的 <code>save</code> 保存，下次就可以双击会话名，或者点击 <code>load</code> 后再打开了。</p>
</blockquote>
<p>打开后就是一个命令行界面。它询问 <code>login as</code>，输入 <code>root</code> 回车即可。现在你就正式登录到服务器上了，你可以在命令行中通过命令操作服务器里的系统。</p>
<p>接下来安装宝塔 Linux 面板。</p>
<blockquote>
<p>Linux 面板用于提供一个方便的界面，以可视化地管理服务器。宝塔面板还有很多关于网站维护的工具，非常好用。</p>
</blockquote>
<p>在命令行中输入 <code>wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; sudo bash install.sh</code>。</p>
<p>等到服务器处理完之后，注意它应该会输出一些内容，像是外网面板地址、内网面板地址、初始默认用户密码之类的。将面板地址复制到浏览器打开（哪个能用用哪个），输入命令行里提供的用户名和密码。然后就能看到一个面板页面。</p>
<blockquote>
<p>如果不慎关闭了命令行也没关系。重新打开命令行，在其中输入 <code>bt</code> 命令，会有中文的提示指引，输入编号选择查看默认信息即可。</p>
</blockquote>
<p>第一次进入面板，它应该会提示你安装一堆东西，像什么 Apache、mysql、php 之类的。根据 WordPress 的建议，mysql 版本最好选用 5.6+，php 版本最好选用 7.4（之后再更新也是可以的）。安装这些会花很长一段时间，慢慢等待即可。</p>
<p>然后需要将你的网站添加到宝塔面板上，在面板的左侧的“网站”里添加网站即可。记得 FTP、数据库都选创建，PHP 版本选到 7.4 及以上即可。这一步比较简单，不再赘述。</p>
<blockquote>
<p>另外，在这一个界面上可以给网站配置 SSL 证书，最好打开强制 HTTPS。另外建议把面板的 SSL 也开了，在面板的设置里面就有。不过开了之后浏览器可能反而告诉你站点不安全，甚至有可能拦截你。我们不管它就好。</p>
</blockquote>
<h3 id="wordpress-的安装">wordpress 的安装</h3>
<p>这个参考<a href="https://blog.naibabiji.com/tutorial/bao-ta-an-zhuang-wordpress.html" target="_blank" rel="noopener">这篇教程</a>即可，写得很详细了。</p>
<h2 id="总结">总结</h2>
<p>完成上面这些步骤，就可以在浏览器里通过域名访问网页了。你将会看到 wordpress 默认主题下的首页。</p>
<p>撒花庆祝ヾ(≧▽≦*)o。</p>
<p>如果有什么疑问的话请在评论说明，我会尽我所能解答的。</p>
<blockquote>
<p>版权声明：本文采用 <a
  href="http://creativecommons.org/licenses/by/4.0/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>CC BY 4.0</a> 进行许可，转载请注明出处。</p>
<p>本文链接：<a
  href="https://idlercloud.fun/posts/blog_site_note_1/"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>https://idlercloud.fun/posts/blog_site_note_1/</a></p>
</blockquote>]]></description>
</item></channel>
</rss>
